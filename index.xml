<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>thinkBig Blog</title>
        <link>https://lzh54080452.github.io/</link>
        <description>Recent content on thinkBig Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 25 Dec 2021 00:40:27 +0800</lastBuildDate><atom:link href="https://lzh54080452.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Docker部署Elasticsearch</title>
        <link>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2elasticsearch/</link>
        <pubDate>Sat, 25 Dec 2021 00:40:27 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2elasticsearch/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/elasticsearch.png" alt="Featured image of post Docker部署Elasticsearch" /&gt;&lt;h1 id=&#34;安装elasticsearch&#34;&gt;安装elasticsearch&lt;/h1&gt;
&lt;h1 id=&#34;1部署单点es&#34;&gt;1.部署单点es&lt;/h1&gt;
&lt;h2 id=&#34;11创建网络&#34;&gt;1.1.创建网络&lt;/h2&gt;
&lt;p&gt;因为我们还需要部署kibana容器，因此需要让es和kibana容器互联。这里先创建一个网络：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker network create es-net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;12加载镜像&#34;&gt;1.2.加载镜像&lt;/h2&gt;
&lt;p&gt;这里我们采用elasticsearch的7.12.1版本的镜像，这个镜像体积非常大，接近1G。不建议大家自己pull。&lt;/p&gt;
&lt;p&gt;课前资料提供了镜像的tar包：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210510165308064.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210510165308064.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210510165308064&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210510165308064&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大家将其上传到虚拟机中，然后运行命令加载即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 导入数据&lt;/span&gt;
docker load -i es.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同理还有&lt;code&gt;kibana&lt;/code&gt;的tar包也需要这样做。&lt;/p&gt;
&lt;h2 id=&#34;13运行&#34;&gt;1.3.运行&lt;/h2&gt;
&lt;p&gt;运行docker命令，部署单点es：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run -d &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	--name es &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;ES_JAVA_OPTS=-Xms512m -Xmx512m&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;discovery.type=single-node&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -v /root/es/es-data:/usr/share/elasticsearch/data &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -v /root/es/es-plugins:/usr/share/elasticsearch/plugins &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --privileged &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --network es-net &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -p 9200:9200 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -p 9300:9300 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;elasticsearch:7.12.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：要给宿主机的数据卷目录加访问权限:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/uTools_1640358745607.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/uTools_1640358745607.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;启动报错&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;启动报错&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;命令解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-e &amp;quot;cluster.name=es-docker-cluster&amp;quot;&lt;/code&gt;：设置集群名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e &amp;quot;http.host=0.0.0.0&amp;quot;&lt;/code&gt;：监听的地址，可以外网访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e &amp;quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&amp;quot;&lt;/code&gt;：内存大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e &amp;quot;discovery.type=single-node&amp;quot;&lt;/code&gt;：非集群模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v /root/es/es-data:/usr/share/elasticsearch/data&lt;/code&gt;：挂载逻辑卷，绑定es的数据目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v /root/es/es-logs:/usr/share/elasticsearch/logs&lt;/code&gt;：挂载逻辑卷，绑定es的日志目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v /root/es/es-plugins:/usr/share/elasticsearch/plugins&lt;/code&gt;：挂载逻辑卷，绑定es的插件目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--privileged&lt;/code&gt;：授予逻辑卷访问权&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--network es-net&lt;/code&gt; ：加入一个名为es-net的网络中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 9200:9200&lt;/code&gt;：端口映射配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在浏览器中输入：http://192.168.187.129:9200 即可看到elasticsearch的响应结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210506101053676.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210506101053676.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210506101053676&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210506101053676&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;2部署kibana&#34;&gt;2.部署kibana&lt;/h1&gt;
&lt;p&gt;kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习。&lt;/p&gt;
&lt;h2 id=&#34;21部署&#34;&gt;2.1.部署&lt;/h2&gt;
&lt;p&gt;运行docker命令，部署kibana&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run -d &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--name kibana &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;ELASTICSEARCH_HOSTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://es:9200 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--network&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es-net &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-p 5601:5601  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;kibana:7.12.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--network es-net&lt;/code&gt; ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e ELASTICSEARCH_HOSTS=http://es:9200&amp;quot;&lt;/code&gt;：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 5601:5601&lt;/code&gt;：端口映射配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;kibana启动一般比较慢，需要多等待一会，可以通过命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker logs -f kibana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看运行日志，当查看到下面的日志，说明成功：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210109105135812.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210109105135812.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210109105135812&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210109105135812&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时，在浏览器输入地址访问：http://192.168.187.129:5601，即可看到结果&lt;/p&gt;
&lt;h2 id=&#34;22devtools&#34;&gt;2.2.DevTools&lt;/h2&gt;
&lt;p&gt;kibana中提供了一个DevTools界面：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/uTools_1640364546977.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/uTools_1640364546977.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;DevTools界面&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;DevTools界面&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个界面中可以编写DSL来操作elasticsearch。并且对DSL语句有自动补全功能。&lt;/p&gt;
&lt;h1 id=&#34;3安装ik分词器&#34;&gt;3.安装IK分词器&lt;/h1&gt;
&lt;h2 id=&#34;31在线安装ik插件较慢&#34;&gt;3.1.在线安装ik插件（较慢）&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 进入容器内部&lt;/span&gt;
docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it elasticsearch /bin/bash

&lt;span class=&#34;c1&#34;&gt;# 在线下载并安装&lt;/span&gt;
./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip

&lt;span class=&#34;c1&#34;&gt;#退出&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#重启容器&lt;/span&gt;
docker restart elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;32离线安装ik插件推荐&#34;&gt;3.2.离线安装ik插件（推荐）&lt;/h2&gt;
&lt;h3 id=&#34;1查看数据卷目录&#34;&gt;1）查看数据卷目录&lt;/h3&gt;
&lt;p&gt;安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker volume inspect es-plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CreatedAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2022-05-06T10:06:34+08:00&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Driver&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Labels&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Mountpoint&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/lib/docker/volumes/es-plugins/_data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;es-plugins&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Scope&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;local&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说明plugins目录被挂载到了：&lt;code&gt;/var/lib/docker/volumes/es-plugins/_data &lt;/code&gt;这个目录中。&lt;/p&gt;
&lt;h3 id=&#34;2解压缩分词器安装包&#34;&gt;2）解压缩分词器安装包&lt;/h3&gt;
&lt;p&gt;下面我们需要把课前资料中的ik分词器解压缩，重命名为ik&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210506110249144.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210506110249144.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210506110249144&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210506110249144&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3上传到es容器的插件数据卷中&#34;&gt;3）上传到es容器的插件数据卷中&lt;/h3&gt;
&lt;p&gt;也就是&lt;code&gt;/var/lib/docker/volumes/es-plugins/_data &lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210506110704293.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210506110704293.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210506110704293&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210506110704293&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;4重启容器&#34;&gt;4）重启容器&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 4、重启容器&lt;/span&gt;
docker restart es
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看es日志&lt;/span&gt;
docker logs -f es
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5测试&#34;&gt;5）测试：&lt;/h3&gt;
&lt;p&gt;IK分词器包含两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ik_smart&lt;/code&gt;：最少切分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ik_max_word&lt;/code&gt;：最细切分&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/_analyze&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ik_max_word&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;李自豪程序员学习java太棒了&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;tokens&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;李自豪&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CN_WORD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;程序员&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CN_WORD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;程序&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CN_WORD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;员&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CN_CHAR&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;学习&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CN_WORD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;java&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ENGLISH&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;太棒了&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CN_WORD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;太棒&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CN_WORD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;了&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CN_CHAR&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;33-扩展词词典&#34;&gt;3.3 扩展词词典&lt;/h2&gt;
&lt;p&gt;随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。比如：“奥力给”，“传智播客” 等。&lt;/p&gt;
&lt;p&gt;所以我们的词汇也需要不断的更新，IK分词器提供了扩展词汇的功能。&lt;/p&gt;
&lt;p&gt;1）打开IK分词器config目录：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210506112225508.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20210506112225508.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210506112225508&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210506112225508&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2）在IKAnalyzer.cfg.xml配置文件内容添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE properties SYSTEM &amp;#34;http://java.sun.com/dtd/properties.dtd&amp;#34;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;comment&amp;gt;&lt;/span&gt;IK Analyzer 扩展配置&lt;span class=&#34;nt&#34;&gt;&amp;lt;/comment&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;c&#34;&gt;&amp;lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;key=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ext_dict&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;ext.dic&lt;span class=&#34;nt&#34;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3）新建一个 ext.dic，可以参考config目录下复制一个配置文件进行修改&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;李自豪
白嫖
奥力给
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4）重启elasticsearch&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker restart es

&lt;span class=&#34;c1&#34;&gt;# 查看 日志&lt;/span&gt;
docker logs -f elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20201115230900504.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_Docker_Deploy/image-20201115230900504.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20201115230900504&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20201115230900504&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;日志中已经成功加载ext.dic配置文件&lt;/p&gt;
&lt;p&gt;5）测试效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/_analyze&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ik_max_word&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;李自豪学习Java,奥力给！&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;34-停用词词典&#34;&gt;3.4 停用词词典&lt;/h2&gt;
&lt;p&gt;在互联网项目中，在网络间传输的速度很快，所以很多语言是不允许在网络上传递的，如：关于宗教、政治等敏感词语，那么我们在搜索时也应该忽略当前词汇。&lt;/p&gt;
&lt;p&gt;IK分词器也提供了强大的停用词功能，让我们在索引时就直接忽略当前的停用词汇表中的内容。&lt;/p&gt;
&lt;p&gt;1）IKAnalyzer.cfg.xml配置文件内容添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE properties SYSTEM &amp;#34;http://java.sun.com/dtd/properties.dtd&amp;#34;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;comment&amp;gt;&lt;/span&gt;IK Analyzer 扩展配置&lt;span class=&#34;nt&#34;&gt;&amp;lt;/comment&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;c&#34;&gt;&amp;lt;!--用户可以在这里配置自己的扩展字典--&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;key=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ext_dict&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;ext.dic&lt;span class=&#34;nt&#34;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
         &lt;span class=&#34;c&#34;&gt;&amp;lt;!--用户可以在这里配置自己的扩展停止词字典  *** 添加停用词词典--&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;key=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ext_stopwords&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;stopword.dic&lt;span class=&#34;nt&#34;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3）在 stopword.dic 添加停用词&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;习大大
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4）重启elasticsearch&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重启服务&lt;/span&gt;
docker restart elasticsearch
docker restart kibana

&lt;span class=&#34;c1&#34;&gt;# 查看 日志&lt;/span&gt;
docker logs -f elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;日志中已经成功加载stopword.dic配置文件&lt;/p&gt;
&lt;p&gt;5）测试效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/_analyze&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ik_max_word&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;李自豪在白嫖springcloud的课程，奥里给！&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;4部署es集群&#34;&gt;4.部署es集群&lt;/h1&gt;
&lt;p&gt;部署es集群可以直接使用docker-compose来完成，不过要求你的Linux虚拟机至少有&lt;strong&gt;4G&lt;/strong&gt;的内存空间&lt;/p&gt;
&lt;p&gt;首先编写一个docker-compose文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;version: &lt;span class=&#34;s1&#34;&gt;&amp;#39;2.2&amp;#39;&lt;/span&gt;
services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    container_name: es01
    environment:
      - node.name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es01
      - cluster.name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es-docker-cluster
      - discovery.seed_hosts&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es02,es03
      - cluster.initial_master_nodes&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es01,es02,es03
      - bootstrap.memory_lock&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
      - &lt;span class=&#34;s2&#34;&gt;&amp;#34;ES_JAVA_OPTS=-Xms512m -Xmx512m&amp;#34;&lt;/span&gt;
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic
  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    container_name: es02
    environment:
      - node.name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es02
      - cluster.name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es-docker-cluster
      - discovery.seed_hosts&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es01,es03
      - cluster.initial_master_nodes&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es01,es02,es03
      - bootstrap.memory_lock&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
      - &lt;span class=&#34;s2&#34;&gt;&amp;#34;ES_JAVA_OPTS=-Xms512m -Xmx512m&amp;#34;&lt;/span&gt;
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic
  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    container_name: es03
    environment:
      - node.name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es03
      - cluster.name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es-docker-cluster
      - discovery.seed_hosts&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es01,es02
      - cluster.initial_master_nodes&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;es01,es02,es03
      - bootstrap.memory_lock&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
      - &lt;span class=&#34;s2&#34;&gt;&amp;#34;ES_JAVA_OPTS=-Xms512m -Xmx512m&amp;#34;&lt;/span&gt;
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic

volumes:
  data01:
    driver: &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;
  data02:
    driver: &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;
  data03:
    driver: &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;

networks:
  elastic:
    driver: bridge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;docker-compose&lt;/code&gt; to bring up the cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Elasticsearch教程</title>
        <link>https://lzh54080452.github.io/p/elasticsearch%E6%95%99%E7%A8%8B/</link>
        <pubDate>Sat, 25 Dec 2021 00:40:27 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/elasticsearch%E6%95%99%E7%A8%8B/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/elasticsearch.png" alt="Featured image of post Elasticsearch教程" /&gt;&lt;h1 id=&#34;分布式搜索引擎01&#34;&gt;分布式搜索引擎01&lt;/h1&gt;
&lt;p&gt;&amp;ndash; elasticsearch基础&lt;/p&gt;
&lt;h1 id=&#34;0学习目标&#34;&gt;0.学习目标&lt;/h1&gt;
&lt;h1 id=&#34;1初识elasticsearch&#34;&gt;1.初识elasticsearch&lt;/h1&gt;
&lt;h2 id=&#34;11了解es&#34;&gt;1.1.了解ES&lt;/h2&gt;
&lt;h3 id=&#34;111elasticsearch的作用&#34;&gt;1.1.1.elasticsearch的作用&lt;/h3&gt;
&lt;p&gt;elasticsearch是一款非常强大的开源搜索引擎，具备非常多强大功能，可以帮助我们从海量数据中快速找到需要的内容&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在GitHub搜索代码&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720193623245.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720193623245.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720193623245&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720193623245&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在电商网站搜索商品&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720193633483.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720193633483.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720193633483&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720193633483&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在百度搜索答案&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720193641907.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720193641907.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720193641907&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720193641907&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在打车软件搜索附近的车&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720193648044.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720193648044.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720193648044&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720193648044&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;112elk技术栈&#34;&gt;1.1.2.ELK技术栈&lt;/h3&gt;
&lt;p&gt;elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720194008781.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720194008781.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720194008781&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720194008781&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720194230265.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720194230265.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720194230265&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720194230265&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;113elasticsearch和lucene&#34;&gt;1.1.3.elasticsearch和lucene&lt;/h3&gt;
&lt;p&gt;elasticsearch底层是基于&lt;strong&gt;lucene&lt;/strong&gt;来实现的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lucene&lt;/strong&gt;是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发。官网地址：https://lucene.apache.org/ 。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720194547780.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720194547780.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720194547780&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720194547780&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;elasticsearch&lt;/strong&gt;的发展历史：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2004年Shay Banon基于Lucene开发了Compass&lt;/li&gt;
&lt;li&gt;2010年Shay Banon 重写了Compass，取名为Elasticsearch。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720195001221.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720195001221.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720195001221&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720195001221&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;114为什么不是其他搜索技术&#34;&gt;1.1.4.为什么不是其他搜索技术？&lt;/h3&gt;
&lt;p&gt;目前比较知名的搜索引擎技术排名：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720195142535.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720195142535.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720195142535&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720195142535&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;虽然在早期，Apache Solr是最主要的搜索引擎技术，但随着发展elasticsearch已经渐渐超越了Solr，独占鳌头：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720195306484.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720195306484.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720195306484&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720195306484&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;115总结&#34;&gt;1.1.5.总结&lt;/h3&gt;
&lt;p&gt;什么是elasticsearch？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么是elastic stack（ELK）？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是以elasticsearch为核心的技术栈，包括beats、Logstash、kibana、elasticsearch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么是Lucene？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是Apache的开源搜索引擎类库，提供了搜索引擎的核心API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12倒排索引&#34;&gt;1.2.倒排索引&lt;/h2&gt;
&lt;p&gt;倒排索引的概念是基于MySQL这样的正向索引而言的。&lt;/p&gt;
&lt;h3 id=&#34;121正向索引&#34;&gt;1.2.1.正向索引&lt;/h3&gt;
&lt;p&gt;那么什么是正向索引呢？例如给下表（tb_goods）中的id创建索引：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720195531539.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720195531539.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720195531539&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720195531539&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果是根据id查询，那么直接走索引，查询速度非常快。&lt;/p&gt;
&lt;p&gt;但如果是基于title做模糊查询，只能是逐行扫描数据，流程如下：&lt;/p&gt;
&lt;p&gt;1）用户搜索数据，条件是title符合&lt;code&gt;&amp;quot;%手机%&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2）逐行获取数据，比如id为1的数据&lt;/p&gt;
&lt;p&gt;3）判断数据中的title是否符合用户搜索条件&lt;/p&gt;
&lt;p&gt;4）如果符合则放入结果集，不符合则丢弃。回到步骤1&lt;/p&gt;
&lt;p&gt;逐行扫描，也就是全表扫描，随着数据量增加，其查询效率也会越来越低。当数据量达到数百万时，就是一场灾难。&lt;/p&gt;
&lt;h3 id=&#34;122倒排索引&#34;&gt;1.2.2.倒排索引&lt;/h3&gt;
&lt;p&gt;倒排索引中有两个非常重要的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档（&lt;code&gt;Document&lt;/code&gt;）：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息&lt;/li&gt;
&lt;li&gt;词条（&lt;code&gt;Term&lt;/code&gt;）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;创建倒排索引&lt;/strong&gt;是对正向索引的一种特殊处理，流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将每一个文档的数据利用算法分词，得到一个个词条&lt;/li&gt;
&lt;li&gt;创建表，每行数据包括词条、词条所在文档id、位置等信息&lt;/li&gt;
&lt;li&gt;因为词条唯一性，可以给词条创建索引，例如hash表结构索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720200457207.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720200457207.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720200457207&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720200457207&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;倒排索引的&lt;strong&gt;搜索流程&lt;/strong&gt;如下（以搜索&amp;quot;华为手机&amp;quot;为例）：&lt;/p&gt;
&lt;p&gt;1）用户输入条件&lt;code&gt;&amp;quot;华为手机&amp;quot;&lt;/code&gt;进行搜索。&lt;/p&gt;
&lt;p&gt;2）对用户输入内容&lt;strong&gt;分词&lt;/strong&gt;，得到词条：&lt;code&gt;华为&lt;/code&gt;、&lt;code&gt;手机&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;3）拿着词条在倒排索引中查找，可以得到包含词条的文档id：1、2、3。&lt;/p&gt;
&lt;p&gt;4）拿着文档id到正向索引中查找具体文档。&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720201115192.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720201115192.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720201115192&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720201115192&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;虽然要先查询倒排索引，再查询倒排索引，但是无论是词条、还是文档id都建立了索引，查询速度非常快！无需全表扫描。&lt;/p&gt;
&lt;h3 id=&#34;123正向和倒排&#34;&gt;1.2.3.正向和倒排&lt;/h3&gt;
&lt;p&gt;那么为什么一个叫做正向索引，一个叫做倒排索引呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;正向索引&lt;/strong&gt;是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是&lt;strong&gt;根据文档找词条的过程&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而&lt;strong&gt;倒排索引&lt;/strong&gt;则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是&lt;strong&gt;根据词条找文档的过程&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是不是恰好反过来了？&lt;/p&gt;
&lt;p&gt;那么两者方式的优缺点是什么呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正向索引&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;可以给多个字段创建索引&lt;/li&gt;
&lt;li&gt;根据索引字段搜索、排序速度非常快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;倒排索引&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;根据词条搜索、模糊搜索时，速度非常快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;只能给词条创建索引，而不是字段&lt;/li&gt;
&lt;li&gt;无法根据字段做排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13es的一些概念&#34;&gt;1.3.es的一些概念&lt;/h2&gt;
&lt;p&gt;elasticsearch中有很多独有的概念，与mysql中略有差别，但也有相似之处。&lt;/p&gt;
&lt;h3 id=&#34;131文档和字段&#34;&gt;1.3.1.文档和字段&lt;/h3&gt;
&lt;p&gt;elasticsearch是面向**文档（Document）**存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720202707797.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720202707797.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720202707797&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720202707797&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而Json文档中往往包含很多的&lt;strong&gt;字段（Field）&lt;/strong&gt;，类似于数据库中的列。&lt;/p&gt;
&lt;h3 id=&#34;132索引和映射&#34;&gt;1.3.2.索引和映射&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;索引（Index）&lt;/strong&gt;，就是相同类型的文档的集合。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有用户文档，就可以组织在一起，称为用户的索引；&lt;/li&gt;
&lt;li&gt;所有商品的文档，可以组织在一起，称为商品的索引；&lt;/li&gt;
&lt;li&gt;所有订单的文档，可以组织在一起，称为订单的索引；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720203022172.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720203022172.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720203022172&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720203022172&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，我们可以把索引当做是数据库中的表。&lt;/p&gt;
&lt;p&gt;数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库中就有&lt;strong&gt;映射（mapping）&lt;/strong&gt;，是索引中文档的字段约束信息，类似表的结构约束。&lt;/p&gt;
&lt;h3 id=&#34;133mysql与elasticsearch&#34;&gt;1.3.3.mysql与elasticsearch&lt;/h3&gt;
&lt;p&gt;我们统一的把mysql与elasticsearch的概念做一下对比：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Elasticsearch&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Table&lt;/td&gt;
&lt;td&gt;Index&lt;/td&gt;
&lt;td&gt;索引(index)，就是文档的集合，类似数据库的表(table)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Row&lt;/td&gt;
&lt;td&gt;Document&lt;/td&gt;
&lt;td&gt;文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Column&lt;/td&gt;
&lt;td&gt;Field&lt;/td&gt;
&lt;td&gt;字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Schema&lt;/td&gt;
&lt;td&gt;Mapping&lt;/td&gt;
&lt;td&gt;Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SQL&lt;/td&gt;
&lt;td&gt;DSL&lt;/td&gt;
&lt;td&gt;DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;是不是说，我们学习了elasticsearch就不再需要mysql了呢？&lt;/p&gt;
&lt;p&gt;并不是如此，两者各自有自己的擅长支出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mysql：擅长事务类型操作，可以确保数据的安全和一致性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elasticsearch：擅长海量数据的搜索、分析、计算&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此在企业中，往往是两者结合使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对安全性要求较高的写操作，使用mysql实现&lt;/li&gt;
&lt;li&gt;对查询性能要求较高的搜索需求，使用elasticsearch实现&lt;/li&gt;
&lt;li&gt;两者再基于某种方式，实现数据的同步，保证一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720203534945.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720203534945.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720203534945&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720203534945&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;14安装eskibana&#34;&gt;1.4.安装es、kibana&lt;/h2&gt;
&lt;h3 id=&#34;141安装&#34;&gt;1.4.1.安装&lt;/h3&gt;
&lt;p&gt;参考我的如下博客：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://lzh54080452.github.io/p/docker%e9%83%a8%e7%bd%b2elasticsearch/&#34; &gt;安装Elasticsearch和Kibana&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;142分词器&#34;&gt;1.4.2.分词器&lt;/h3&gt;
&lt;p&gt;参考我的如下博客：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://lzh54080452.github.io/p/docker%e9%83%a8%e7%bd%b2elasticsearch/&#34; &gt;安装Elasticsearch和Kibana&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;143总结&#34;&gt;1.4.3.总结&lt;/h3&gt;
&lt;p&gt;分词器的作用是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建倒排索引时对文档分词&lt;/li&gt;
&lt;li&gt;用户搜索时，对输入的内容分词&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IK分词器有几种模式？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ik_smart：智能切分，粗粒度&lt;/li&gt;
&lt;li&gt;ik_max_word：最细切分，细粒度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IK分词器如何拓展词条？如何停用词条？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用config目录的IkAnalyzer.cfg.xml文件添加拓展词典和停用词典&lt;/li&gt;
&lt;li&gt;在词典中添加拓展词条或者停用词条&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2索引库操作&#34;&gt;2.索引库操作&lt;/h1&gt;
&lt;p&gt;索引库就类似数据库表，mapping映射就类似表的结构。&lt;/p&gt;
&lt;p&gt;我们要向es中存储数据，必须先创建“库”和“表”。&lt;/p&gt;
&lt;h2 id=&#34;21mapping映射属性&#34;&gt;2.1.mapping映射属性&lt;/h2&gt;
&lt;p&gt;mapping是对索引库中文档的约束，常见的mapping属性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type：字段数据类型，常见的简单类型有：
&lt;ul&gt;
&lt;li&gt;字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）&lt;/li&gt;
&lt;li&gt;数值：long、integer、short、byte、double、float、&lt;/li&gt;
&lt;li&gt;布尔：boolean&lt;/li&gt;
&lt;li&gt;日期：date&lt;/li&gt;
&lt;li&gt;对象：object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index：是否创建索引，默认为true&lt;/li&gt;
&lt;li&gt;analyzer：使用哪种分词器&lt;/li&gt;
&lt;li&gt;properties：该字段的子字段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如下面的json文档：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;weight&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;52.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;isMarried&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;程序员Java讲师&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zy@itcast.cn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;score&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;99.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;99.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;98.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;firstName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;云&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;赵&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应的每个字段映射（mapping）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;age：类型为 integer；参与搜索，因此需要index为true；无需分词器&lt;/li&gt;
&lt;li&gt;weight：类型为float；参与搜索，因此需要index为true；无需分词器&lt;/li&gt;
&lt;li&gt;isMarried：类型为boolean；参与搜索，因此需要index为true；无需分词器&lt;/li&gt;
&lt;li&gt;info：类型为字符串，需要分词，因此是text；参与搜索，因此需要index为true；分词器可以用ik_smart&lt;/li&gt;
&lt;li&gt;email：类型为字符串，但是不需要分词，因此是keyword；不参与搜索，因此需要index为false；无需分词器&lt;/li&gt;
&lt;li&gt;score：虽然是数组，但是我们只看元素的类型，类型为float；参与搜索，因此需要index为true；无需分词器&lt;/li&gt;
&lt;li&gt;name：类型为object，需要定义多个子属性
&lt;ul&gt;
&lt;li&gt;name.firstName；类型为字符串，但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器&lt;/li&gt;
&lt;li&gt;name.lastName；类型为字符串，但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22索引库的crud&#34;&gt;2.2.索引库的CRUD&lt;/h2&gt;
&lt;p&gt;这里我们统一使用Kibana编写DSL的方式来演示。&lt;/p&gt;
&lt;h3 id=&#34;221创建索引库和映射&#34;&gt;2.2.1.创建索引库和映射&lt;/h3&gt;
&lt;h4 id=&#34;基本语法&#34;&gt;基本语法：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;请求方式：PUT&lt;/li&gt;
&lt;li&gt;请求路径：/索引库名，可以自定义&lt;/li&gt;
&lt;li&gt;请求参数：mapping映射&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/索引库名称&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;字段名&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ik_smart&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;字段名2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;字段名3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;子字段&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// ...略
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;示例&#34;&gt;示例：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;PUT /heima
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;,
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;ik_smart&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;,
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;falsae&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;firstName&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
      // ... 略
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;222查询索引库&#34;&gt;2.2.2.查询索引库&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求方式：GET&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求路径：/索引库名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求参数：无&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;格式&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET /索引库名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720211019329.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720211019329.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720211019329&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720211019329&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;223修改索引库&#34;&gt;2.2.3.修改索引库&lt;/h3&gt;
&lt;p&gt;倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引，这简直是灾难。因此索引库&lt;strong&gt;一旦创建，无法修改mapping&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;虽然无法修改mapping中已有的字段，但是却允许添加新的字段到mapping中，因为不会对倒排索引产生影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法说明&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/索引库名/_mapping&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;新字段名&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720212357390.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720212357390.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720212357390&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720212357390&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;224删除索引库&#34;&gt;2.2.4.删除索引库&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求方式：DELETE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求路径：/索引库名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求参数：无&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;格式：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;DELETE /索引库名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在kibana中测试：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720212123420.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720212123420.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720212123420&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720212123420&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;225总结&#34;&gt;2.2.5.总结&lt;/h3&gt;
&lt;p&gt;索引库操作有哪些？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建索引库：PUT /索引库名&lt;/li&gt;
&lt;li&gt;查询索引库：GET /索引库名&lt;/li&gt;
&lt;li&gt;删除索引库：DELETE /索引库名&lt;/li&gt;
&lt;li&gt;添加字段：PUT /索引库名/_mapping&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3文档操作&#34;&gt;3.文档操作&lt;/h1&gt;
&lt;h2 id=&#34;31新增文档&#34;&gt;3.1.新增文档&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/索引库名/_doc/文档id&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;字段1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;值1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;字段2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;值2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;字段3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;子属性1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;值3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;子属性2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;值4&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/heima/_doc/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;程序员Java讲师&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zy@itcast.cn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;firstName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;云&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;赵&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;响应：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720212933362.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720212933362.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720212933362&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720212933362&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;32查询文档&#34;&gt;3.2.查询文档&lt;/h2&gt;
&lt;p&gt;根据rest风格，新增是post，查询应该是get，不过查询一般都需要条件，这里我们把文档id带上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;索引库名称&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/_doc/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;通过kibana查看数据：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;heima&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_doc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720213345003.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720213345003.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720213345003&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720213345003&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;33删除文档&#34;&gt;3.3.删除文档&lt;/h2&gt;
&lt;p&gt;删除使用DELETE请求，同样，需要根据id进行删除：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;索引库名&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_doc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id值&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;根据id删除数据&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/heima/_doc/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720213634918.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720213634918.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720213634918&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720213634918&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;34修改文档&#34;&gt;3.4.修改文档&lt;/h2&gt;
&lt;p&gt;修改有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全量修改：直接覆盖原来的文档&lt;/li&gt;
&lt;li&gt;增量修改：修改文档中的部分字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;341全量修改&#34;&gt;3.4.1.全量修改&lt;/h3&gt;
&lt;p&gt;全量修改是覆盖原来的文档，其本质是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据指定的id删除文档&lt;/li&gt;
&lt;li&gt;新增一个相同id的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;索引库名&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/_doc/文档id&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;字段1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;值1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;字段2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;值2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ... 略
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/heima/_doc/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;程序员高级Java讲师&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zy@itcast.cn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;firstName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;云&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;赵&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;342增量修改&#34;&gt;3.4.2.增量修改&lt;/h3&gt;
&lt;p&gt;增量修改是只修改指定id匹配的文档中的部分字段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;索引库名&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/_update/文档id&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;doc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;nt&#34;&gt;&amp;#34;字段名&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;新的值&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/heima/_update/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;doc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ZhaoYun@itcast.cn&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;35总结&#34;&gt;3.5.总结&lt;/h2&gt;
&lt;p&gt;文档操作有哪些？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建文档：POST /{索引库名}/_doc/文档id   { json文档 }&lt;/li&gt;
&lt;li&gt;查询文档：GET /{索引库名}/_doc/文档id&lt;/li&gt;
&lt;li&gt;删除文档：DELETE /{索引库名}/_doc/文档id&lt;/li&gt;
&lt;li&gt;修改文档：
&lt;ul&gt;
&lt;li&gt;全量修改：PUT /{索引库名}/_doc/文档id { json文档 }&lt;/li&gt;
&lt;li&gt;增量修改：POST /{索引库名}/_update/文档id { &amp;ldquo;doc&amp;rdquo;: {字段}}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4restapi&#34;&gt;4.RestAPI&lt;/h1&gt;
&lt;p&gt;ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。官方文档地址：https://www.elastic.co/guide/en/elasticsearch/client/index.html&lt;/p&gt;
&lt;p&gt;其中的Java Rest Client又包括两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java Low Level Rest Client&lt;/li&gt;
&lt;li&gt;Java High Level Rest Client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720214555863.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720214555863.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720214555863&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720214555863&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们学习的是Java HighLevel Rest Client客户端API&lt;/p&gt;
&lt;h2 id=&#34;40导入demo工程&#34;&gt;4.0.导入Demo工程&lt;/h2&gt;
&lt;h3 id=&#34;401导入数据&#34;&gt;4.0.1.导入数据&lt;/h3&gt;
&lt;p&gt;首先导入课前资料提供的数据库数据：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720220400297.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720220400297.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720220400297&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720220400297&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;数据结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tb_hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;酒店id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;酒店名称；例：7天酒店&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;酒店地址；例：航头路&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;酒店价格；例：329&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;酒店评分；例：45，就是4.5分&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;酒店品牌；例：如家&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;city&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;所在城市；例：上海&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;star_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;酒店星级，从低到高分别是：1星到5星，1钻到5钻&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;商圈；例：虹桥&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;纬度；例：31.2497&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;longitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;经度；例：120.3925&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;酒店图片；例:/img/1.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;402导入项目&#34;&gt;4.0.2.导入项目&lt;/h3&gt;
&lt;p&gt;然后导入课前资料提供的项目:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720220503411.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720220503411.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720220503411&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720220503411&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;项目结构如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720220647541.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720220647541.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720220647541&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720220647541&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;403mapping映射分析&#34;&gt;4.0.3.mapping映射分析&lt;/h3&gt;
&lt;p&gt;创建索引库，最关键的是mapping映射，而mapping映射要考虑的信息包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字段名&lt;/li&gt;
&lt;li&gt;字段数据类型&lt;/li&gt;
&lt;li&gt;是否参与搜索&lt;/li&gt;
&lt;li&gt;是否需要分词&lt;/li&gt;
&lt;li&gt;如果分词，分词器是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字段名、字段数据类型，可以参考数据表结构的名称和类型&lt;/li&gt;
&lt;li&gt;是否参与搜索要分析业务来判断，例如图片地址，就无需参与搜索&lt;/li&gt;
&lt;li&gt;是否分词呢要看内容，内容如果是一个整体就无需分词，反之则要分词&lt;/li&gt;
&lt;li&gt;分词器，我们可以统一使用ik_max_word&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来看下酒店数据的索引库结构:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/hotel&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ik_max_word&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;copy_to&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;score&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;copy_to&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;city&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;copy_to&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;starName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;business&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;geo_point&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;pic&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ik_max_word&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;几个特殊字段说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;location：地理坐标，里面包含精度、纬度&lt;/li&gt;
&lt;li&gt;all：一个组合字段，其目的是将多字段的值 利用copy_to合并，提供给用户搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;地理坐标说明：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720222110126.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720222110126.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720222110126&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720222110126&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;copy_to说明：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720222221516.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720222221516.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720222221516&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720222221516&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;404初始化restclient&#34;&gt;4.0.4.初始化RestClient&lt;/h3&gt;
&lt;p&gt;在elasticsearch提供的API中，与elasticsearch一切交互都封装在一个名为RestHighLevelClient的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。&lt;/p&gt;
&lt;p&gt;分为三步：&lt;/p&gt;
&lt;p&gt;1）引入es的RestHighLevelClient依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.elasticsearch.client&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;elasticsearch-rest-high-level-client&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）因为SpringBoot默认的ES版本是7.6.2，所以我们需要覆盖默认的ES版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;java.version&amp;gt;&lt;/span&gt;1.8&lt;span class=&#34;nt&#34;&gt;&amp;lt;/java.version&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;elasticsearch.version&amp;gt;&lt;/span&gt;7.12.1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/elasticsearch.version&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3）初始化RestHighLevelClient：&lt;/p&gt;
&lt;p&gt;初始化的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;RestHighLevelClient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestHighLevelClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RestClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;HttpHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://192.168.150.101:9200&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里为了单元测试方便，我们创建一个测试类HotelIndexTest，然后将初始化的代码编写在@BeforeEach方法中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.apache.http.HttpHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.elasticsearch.client.RestHighLevelClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.jupiter.api.AfterEach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.jupiter.api.BeforeEach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HotelIndexTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestHighLevelClient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@BeforeEach&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestHighLevelClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RestClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;HttpHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://192.168.150.101:9200&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@AfterEach&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tearDown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;41创建索引库&#34;&gt;4.1.创建索引库&lt;/h2&gt;
&lt;h3 id=&#34;411代码解读&#34;&gt;4.1.1.代码解读&lt;/h3&gt;
&lt;p&gt;创建索引库的API如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720223049408.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720223049408.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720223049408&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720223049408&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码分为三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）创建Request对象。因为是创建索引库的操作，因此Request是CreateIndexRequest。&lt;/li&gt;
&lt;li&gt;2）添加请求参数，其实就是DSL的JSON参数部分。因为json字符串很长，这里是定义了静态字符串常量MAPPING_TEMPLATE，让代码看起来更加优雅。&lt;/li&gt;
&lt;li&gt;3）发送请求，client.indices()方法的返回值是IndicesClient类型，封装了所有与索引库操作有关的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;412完整示例&#34;&gt;4.1.2.完整示例&lt;/h3&gt;
&lt;p&gt;在hotel-demo的cn.itcast.hotel.constants包下，创建一个类，定义mapping映射的JSON字符串常量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.hotel.constants&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HotelConstants&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAPPING_TEMPLATE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;  \&amp;#34;mappings\&amp;#34;: {\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;    \&amp;#34;properties\&amp;#34;: {\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;id\&amp;#34;: {\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;keyword\&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;name\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;text\&amp;#34;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;analyzer\&amp;#34;: \&amp;#34;ik_max_word\&amp;#34;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;copy_to\&amp;#34;: \&amp;#34;all\&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;address\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;keyword\&amp;#34;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;index\&amp;#34;: false\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;price\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;integer\&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;score\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;integer\&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;brand\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;keyword\&amp;#34;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;copy_to\&amp;#34;: \&amp;#34;all\&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;city\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;keyword\&amp;#34;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;copy_to\&amp;#34;: \&amp;#34;all\&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;starName\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;keyword\&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;business\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;keyword\&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;location\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;geo_point\&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;pic\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;keyword\&amp;#34;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;index\&amp;#34;: false\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      },\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      \&amp;#34;all\&amp;#34;:{\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;type\&amp;#34;: \&amp;#34;text\&amp;#34;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;        \&amp;#34;analyzer\&amp;#34;: \&amp;#34;ik_max_word\&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;      }\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;    }\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;  }\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在hotel-demo中的HotelIndexTest测试类中，编写单元测试，实现创建索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createHotelIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 1.创建Request对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;CreateIndexRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CreateIndexRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hotel&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 2.准备请求的参数：DSL语句
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAPPING_TEMPLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;XContentType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 3.发送请求
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestOptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;42删除索引库&#34;&gt;4.2.删除索引库&lt;/h2&gt;
&lt;p&gt;删除索引库的DSL语句非常简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/hotel&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与创建索引库相比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方式从PUT变为DELTE&lt;/li&gt;
&lt;li&gt;请求路径不变&lt;/li&gt;
&lt;li&gt;无请求参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以代码的差异，注意体现在Request对象上。依然是三步走：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）创建Request对象。这次是DeleteIndexRequest对象&lt;/li&gt;
&lt;li&gt;2）准备参数。这里是无参&lt;/li&gt;
&lt;li&gt;3）发送请求。改用delete方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在hotel-demo中的HotelIndexTest测试类中，编写单元测试，实现删除索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testDeleteHotelIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 1.创建Request对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;DeleteIndexRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DeleteIndexRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hotel&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 2.发送请求
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestOptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;43判断索引库是否存在&#34;&gt;4.3.判断索引库是否存在&lt;/h2&gt;
&lt;p&gt;判断索引库是否存在，本质就是查询，对应的DSL是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/hotel&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此与删除的Java代码流程是类似的。依然是三步走：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）创建Request对象。这次是GetIndexRequest对象&lt;/li&gt;
&lt;li&gt;2）准备参数。这里是无参&lt;/li&gt;
&lt;li&gt;3）发送请求。改用exists方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testExistsHotelIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 1.创建Request对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;GetIndexRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetIndexRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hotel&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 2.发送请求
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exists&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestOptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 3.输出
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exists&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;索引库已经存在！&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;索引库不存在！&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;44总结&#34;&gt;4.4.总结&lt;/h2&gt;
&lt;p&gt;JavaRestClient操作elasticsearch的流程基本类似。核心是client.indices()方法来获取索引库的操作对象。&lt;/p&gt;
&lt;p&gt;索引库操作的基本步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化RestHighLevelClient&lt;/li&gt;
&lt;li&gt;创建XxxIndexRequest。XXX是Create、Get、Delete&lt;/li&gt;
&lt;li&gt;准备DSL（ Create时需要，其它是无参）&lt;/li&gt;
&lt;li&gt;发送请求。调用RestHighLevelClient#indices().xxx()方法，xxx是create、exists、delete&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5restclient操作文档&#34;&gt;5.RestClient操作文档&lt;/h1&gt;
&lt;p&gt;为了与索引库操作分离，我们再次参加一个测试类，做两件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化RestHighLevelClient&lt;/li&gt;
&lt;li&gt;我们的酒店数据在数据库，需要利用IHotelService去查询，所以注入这个接口&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.hotel.pojo.Hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.hotel.service.IHotelService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.jupiter.api.AfterEach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.jupiter.api.BeforeEach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.test.context.SpringBootTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HotelDocumentTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IHotelService&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotelService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestHighLevelClient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@BeforeEach&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestHighLevelClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RestClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;HttpHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://192.168.150.101:9200&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@AfterEach&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tearDown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;51新增文档&#34;&gt;5.1.新增文档&lt;/h2&gt;
&lt;p&gt;我们要将数据库的酒店数据查询出来，写入elasticsearch中。&lt;/p&gt;
&lt;h3 id=&#34;511索引库实体类&#34;&gt;5.1.1.索引库实体类&lt;/h3&gt;
&lt;p&gt;数据库查询后的结果是一个Hotel类型的对象。结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Data&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@TableName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tb_hotel&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hotel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@TableId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IdType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;INPUT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;city&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;starName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;longitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与我们的索引库结构存在差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;longitude和latitude需要合并为location&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，我们需要定义一个新的类型，与索引库结构吻合：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.hotel.pojo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;lombok.Data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;lombok.NoArgsConstructor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Data&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HotelDoc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;city&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;starName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HotelDoc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hotel&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPrice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getScore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;brand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBrand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;city&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getCity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;starName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getStarName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;business&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBusiness&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getLatitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getLongitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;pic&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;512语法说明&#34;&gt;5.1.2.语法说明&lt;/h3&gt;
&lt;p&gt;新增文档的DSL语句如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;索引库名&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/_doc/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Jack&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应的java代码如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720230027240.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720230027240.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720230027240&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720230027240&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到与创建索引库类似，同样是三步走：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）创建Request对象&lt;/li&gt;
&lt;li&gt;2）准备请求参数，也就是DSL中的JSON文档&lt;/li&gt;
&lt;li&gt;3）发送请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;变化的地方在于，这里直接使用client.xxx()的API，不再需要client.indices()了。&lt;/p&gt;
&lt;h3 id=&#34;513完整代码&#34;&gt;5.1.3.完整代码&lt;/h3&gt;
&lt;p&gt;我们导入酒店数据，基本流程一致，但是需要考虑几点变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;酒店数据来自于数据库，我们需要先查询出来，得到hotel对象&lt;/li&gt;
&lt;li&gt;hotel对象需要转为HotelDoc对象&lt;/li&gt;
&lt;li&gt;HotelDoc需要序列化为json格式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，代码整体步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）根据id查询酒店数据Hotel&lt;/li&gt;
&lt;li&gt;2）将Hotel封装为HotelDoc&lt;/li&gt;
&lt;li&gt;3）将HotelDoc序列化为JSON&lt;/li&gt;
&lt;li&gt;4）创建IndexRequest，指定索引库名和id&lt;/li&gt;
&lt;li&gt;5）准备请求参数，也就是JSON文档&lt;/li&gt;
&lt;li&gt;6）发送请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在hotel-demo的HotelDocumentTest测试类中，编写单元测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testAddDocument&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 1.根据id查询酒店数据
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Hotel&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotelService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getById&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;61083L&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 2.转换为文档类型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;HotelDoc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotelDoc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HotelDoc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 3.将HotelDoc转json
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toJSONString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hotelDoc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 1.准备Request对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;IndexRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hotel&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hotelDoc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 2.准备Json文档
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;XContentType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 3.发送请求
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestOptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;52查询文档&#34;&gt;5.2.查询文档&lt;/h2&gt;
&lt;h3 id=&#34;521语法说明&#34;&gt;5.2.1.语法说明&lt;/h3&gt;
&lt;p&gt;查询的DSL语句如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/hotel/_doc/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;非常简单，因此代码大概分两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备Request对象&lt;/li&gt;
&lt;li&gt;发送请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过查询的目的是得到结果，解析为HotelDoc，因此难点是结果的解析。完整代码如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720230811674.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720230811674.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720230811674&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720230811674&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，结果是一个JSON，其中文档放在一个&lt;code&gt;_source&lt;/code&gt;属性中，因此解析就是拿到&lt;code&gt;_source&lt;/code&gt;，反序列化为Java对象即可。&lt;/p&gt;
&lt;p&gt;与之前类似，也是三步走：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）准备Request对象。这次是查询，所以是GetRequest&lt;/li&gt;
&lt;li&gt;2）发送请求，得到结果。因为是查询，这里调用client.get()方法&lt;/li&gt;
&lt;li&gt;3）解析结果，就是对JSON做反序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;522完整代码&#34;&gt;5.2.2.完整代码&lt;/h3&gt;
&lt;p&gt;在hotel-demo的HotelDocumentTest测试类中，编写单元测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testGetDocumentById&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 1.准备Request
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;GetRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hotel&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;61082&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 2.发送请求，得到响应
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;GetResponse&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestOptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 3.解析响应结果
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSourceAsString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;HotelDoc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotelDoc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;parseObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HotelDoc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hotelDoc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;53删除文档&#34;&gt;5.3.删除文档&lt;/h2&gt;
&lt;p&gt;删除的DSL为是这样的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/hotel/_doc/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与查询相比，仅仅是请求方式从DELETE变成GET，可以想象Java代码应该依然是三步走：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）准备Request对象，因为是删除，这次是DeleteRequest对象。要指定索引库名和id&lt;/li&gt;
&lt;li&gt;2）准备参数，无参&lt;/li&gt;
&lt;li&gt;3）发送请求。因为是删除，所以是client.delete()方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在hotel-demo的HotelDocumentTest测试类中，编写单元测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testDeleteDocument&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 1.准备Request
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;DeleteRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DeleteRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hotel&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;61083&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 2.发送请求
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestOptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;54修改文档&#34;&gt;5.4.修改文档&lt;/h2&gt;
&lt;h3 id=&#34;541语法说明&#34;&gt;5.4.1.语法说明&lt;/h3&gt;
&lt;p&gt;修改我们讲过两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全量修改：本质是先根据id删除，再新增&lt;/li&gt;
&lt;li&gt;增量修改：修改文档中的指定字段值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果新增时，ID已经存在，则修改&lt;/li&gt;
&lt;li&gt;如果新增时，ID不存在，则新增&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里不再赘述，我们主要关注增量修改。&lt;/p&gt;
&lt;p&gt;代码示例如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720231040875.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720231040875.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720231040875&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720231040875&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与之前类似，也是三步走：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）准备Request对象。这次是修改，所以是UpdateRequest&lt;/li&gt;
&lt;li&gt;2）准备参数。也就是JSON文档，里面包含要修改的字段&lt;/li&gt;
&lt;li&gt;3）更新文档。这里调用client.update()方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;542完整代码&#34;&gt;5.4.2.完整代码&lt;/h3&gt;
&lt;p&gt;在hotel-demo的HotelDocumentTest测试类中，编写单元测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testUpdateDocument&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 1.准备Request
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UpdateRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UpdateRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hotel&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;61083&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 2.准备请求参数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;doc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;952&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;starName&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;四钻&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 3.发送请求
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestOptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;55批量导入文档&#34;&gt;5.5.批量导入文档&lt;/h2&gt;
&lt;p&gt;案例需求：利用BulkRequest批量将数据库数据导入到索引库中。&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;利用mybatis-plus查询酒店数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将查询到的酒店数据（Hotel）转换为文档类型数据（HotelDoc）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用JavaRestClient中的BulkRequest批处理，实现批量新增文档&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;551语法说明&#34;&gt;5.5.1.语法说明&lt;/h3&gt;
&lt;p&gt;批量处理BulkRequest，其本质就是将多个普通的CRUD请求组合在一起发送。&lt;/p&gt;
&lt;p&gt;其中提供了一个add方法，用来添加其他请求：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720232105943.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720232105943.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720232105943&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720232105943&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，能添加的请求包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IndexRequest，也就是新增&lt;/li&gt;
&lt;li&gt;UpdateRequest，也就是修改&lt;/li&gt;
&lt;li&gt;DeleteRequest，也就是删除&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此Bulk中添加了多个IndexRequest，就是批量新增功能了。示例：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720232431383.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Elasticsearch_course/image-20210720232431383.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210720232431383&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210720232431383&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实还是三步走：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）创建Request对象。这里是BulkRequest&lt;/li&gt;
&lt;li&gt;2）准备参数。批处理的参数，就是其它Request对象，这里就是多个IndexRequest&lt;/li&gt;
&lt;li&gt;3）发起请求。这里是批处理，调用的方法为client.bulk()方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们在导入酒店数据时，将上述代码改造成for循环处理即可。&lt;/p&gt;
&lt;h3 id=&#34;552完整代码&#34;&gt;5.5.2.完整代码&lt;/h3&gt;
&lt;p&gt;在hotel-demo的HotelDocumentTest测试类中，编写单元测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testBulkRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 批量查询酒店数据
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotels&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotelService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 1.创建Request
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;BulkRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BulkRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 2.准备参数，添加多个新增的Request
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hotel&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotels&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 2.1.转换为文档类型HotelDoc
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;HotelDoc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hotelDoc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HotelDoc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hotel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 2.2.创建新增文档的Request对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hotel&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hotelDoc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toJSONString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hotelDoc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;XContentType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 3.发送请求
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;bulk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestOptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;56小结&#34;&gt;5.6.小结&lt;/h2&gt;
&lt;p&gt;文档操作的基本步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化RestHighLevelClient&lt;/li&gt;
&lt;li&gt;创建XxxRequest。XXX是Index、Get、Update、Delete、Bulk&lt;/li&gt;
&lt;li&gt;准备参数（Index、Update、Bulk时需要）&lt;/li&gt;
&lt;li&gt;发送请求。调用RestHighLevelClient#.xxx()方法，xxx是index、get、update、delete、bulk&lt;/li&gt;
&lt;li&gt;解析结果（Get时需要）&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Docker部署RabbitMQ</title>
        <link>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2rabbitmq/</link>
        <pubDate>Fri, 24 Dec 2021 14:47:49 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2rabbitmq/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/rabbitMQ.jpg" alt="Featured image of post Docker部署RabbitMQ" /&gt;&lt;h1 id=&#34;rabbitmq部署指南&#34;&gt;RabbitMQ部署指南&lt;/h1&gt;
&lt;h1 id=&#34;1单机部署&#34;&gt;1.单机部署&lt;/h1&gt;
&lt;p&gt;我们在Centos7虚拟机中使用Docker来安装。&lt;/p&gt;
&lt;h2 id=&#34;11下载镜像&#34;&gt;1.1.下载镜像&lt;/h2&gt;
&lt;p&gt;拉取 RabbitMQ Docker 镜像 我这里使用的 3-management 版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker pull rabbitmq:3-management
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;12通过镜像运行mq&#34;&gt;1.2.通过镜像运行MQ&lt;/h2&gt;
&lt;p&gt;执行下面的命令来运行MQ容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -e &lt;span class=&#34;nv&#34;&gt;RABBITMQ_DEFAULT_USER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;={&lt;/span&gt;你的用户名&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -e &lt;span class=&#34;nv&#34;&gt;RABBITMQ_DEFAULT_PASS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;={&lt;/span&gt;你的密码&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; --name rabbitmq &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; --hostname mq1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -p 15672:15672 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -p 5672:5672 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -d &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; rabbitmq:3-management
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>RabbitMQ如何使用</title>
        <link>https://lzh54080452.github.io/p/rabbitmq%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Fri, 24 Dec 2021 14:29:01 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/rabbitmq%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/rabbitMQ.jpg" alt="Featured image of post RabbitMQ如何使用" /&gt;&lt;h1 id=&#34;1什么是消息队列&#34;&gt;1.什么是消息队列&lt;/h1&gt;
&lt;h2 id=&#34;11同步和异步通讯&#34;&gt;1.1.同步和异步通讯&lt;/h2&gt;
&lt;p&gt;微服务间通讯有同步和异步两种方式：&lt;/p&gt;
&lt;p&gt;同步通讯：就像打电话，需要实时响应。&lt;/p&gt;
&lt;p&gt;异步通讯：就像发邮件，不需要马上回复。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717161939695.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717161939695.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717161939695&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717161939695&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。&lt;/p&gt;
&lt;h3 id=&#34;111同步通讯&#34;&gt;1.1.1.同步通讯&lt;/h3&gt;
&lt;p&gt;我们之前学习的Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717162004285.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717162004285.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717162004285&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717162004285&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;同步调用的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时效性较强，可以立即得到结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同步调用的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;耦合度高&lt;/li&gt;
&lt;li&gt;性能和吞吐能力下降&lt;/li&gt;
&lt;li&gt;有额外的资源消耗&lt;/li&gt;
&lt;li&gt;有级联失败问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;112异步通讯&#34;&gt;1.1.2.异步通讯&lt;/h3&gt;
&lt;p&gt;异步调用则可以避免上述问题：&lt;/p&gt;
&lt;p&gt;我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。&lt;/p&gt;
&lt;p&gt;在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。&lt;/p&gt;
&lt;p&gt;订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。&lt;/p&gt;
&lt;p&gt;为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210422095356088.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210422095356088.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210422095356088&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210422095356088&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。&lt;/p&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;吞吐量提升：无需等待订阅者处理完成，响应更快速&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;故障隔离：服务没有直接调用，不存在级联失败问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用间没有阻塞，不会造成无效的资源占用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;耦合度极低，每个服务都可以灵活插拔，可替换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;架构复杂了，业务没有明显的流程线，不好管理&lt;/li&gt;
&lt;li&gt;需要依赖于Broker的可靠、安全、性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好在现在开源软件或云平台上 Broker 的软件是非常成熟的，比较常见的一种就是我们今天要学习的MQ技术。&lt;/p&gt;
&lt;h2 id=&#34;12技术对比&#34;&gt;1.2.技术对比：&lt;/h2&gt;
&lt;p&gt;MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。&lt;/p&gt;
&lt;p&gt;比较常见的MQ实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ActiveMQ&lt;/li&gt;
&lt;li&gt;RabbitMQ&lt;/li&gt;
&lt;li&gt;RocketMQ&lt;/li&gt;
&lt;li&gt;Kafka&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几种常见MQ的对比：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;ActiveMQ&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;RocketMQ&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Kafka&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;公司/社区&lt;/td&gt;
&lt;td&gt;Rabbit&lt;/td&gt;
&lt;td&gt;Apache&lt;/td&gt;
&lt;td&gt;阿里&lt;/td&gt;
&lt;td&gt;Apache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开发语言&lt;/td&gt;
&lt;td&gt;Erlang&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;Scala&amp;amp;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;协议支持&lt;/td&gt;
&lt;td&gt;AMQP，XMPP，SMTP，STOMP&lt;/td&gt;
&lt;td&gt;OpenWire,STOMP，REST,XMPP,AMQP&lt;/td&gt;
&lt;td&gt;自定义协议&lt;/td&gt;
&lt;td&gt;自定义协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可用性&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;一般&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;单机吞吐量&lt;/td&gt;
&lt;td&gt;一般&lt;/td&gt;
&lt;td&gt;差&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;非常高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息延迟&lt;/td&gt;
&lt;td&gt;微秒级&lt;/td&gt;
&lt;td&gt;毫秒级&lt;/td&gt;
&lt;td&gt;毫秒级&lt;/td&gt;
&lt;td&gt;毫秒以内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息可靠性&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;一般&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;一般&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;追求可用性：Kafka、 RocketMQ 、RabbitMQ&lt;/p&gt;
&lt;p&gt;追求可靠性：RabbitMQ、RocketMQ&lt;/p&gt;
&lt;p&gt;追求吞吐能力：RocketMQ、Kafka&lt;/p&gt;
&lt;p&gt;追求消息低延迟：RabbitMQ、Kafka&lt;/p&gt;
&lt;h1 id=&#34;2快速入门&#34;&gt;2.快速入门&lt;/h1&gt;
&lt;h2 id=&#34;21安装rabbitmq&#34;&gt;2.1.安装RabbitMQ&lt;/h2&gt;
&lt;p&gt;安装RabbitMQ，参考我的&lt;a class=&#34;link&#34; href=&#34;https://lzh54080452.github.io/p/docker%e9%83%a8%e7%bd%b2rabbitmq/&#34; &gt;Docker部署RabbitMQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MQ的基本结构：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717162752376.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717162752376.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717162752376&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717162752376&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;RabbitMQ中的一些角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;publisher：生产者&lt;/li&gt;
&lt;li&gt;consumer：消费者&lt;/li&gt;
&lt;li&gt;exchange个：交换机，负责消息路由&lt;/li&gt;
&lt;li&gt;queue：队列，存储消息&lt;/li&gt;
&lt;li&gt;virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22rabbitmq消息模型&#34;&gt;2.2.RabbitMQ消息模型&lt;/h2&gt;
&lt;p&gt;RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717163332646.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717163332646.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717163332646&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717163332646&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;23导入demo工程&#34;&gt;2.3.导入Demo工程&lt;/h2&gt;
&lt;p&gt;课前资料提供了一个Demo工程，mq-demo:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717163253264.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717163253264.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717163253264&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717163253264&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;导入后可以看到结构如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717163604330.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717163604330.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717163604330&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717163604330&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;包括三部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mq-demo：父工程，管理项目依赖&lt;/li&gt;
&lt;li&gt;publisher：消息的发送者&lt;/li&gt;
&lt;li&gt;consumer：消息的消费者&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;24入门案例&#34;&gt;2.4.入门案例&lt;/h2&gt;
&lt;p&gt;简单队列模式的模型图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717163434647.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717163434647.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717163434647&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717163434647&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;publisher：消息发布者，将消息发送到队列queue&lt;/li&gt;
&lt;li&gt;queue：消息队列，负责接受并缓存消息&lt;/li&gt;
&lt;li&gt;consumer：订阅队列，处理队列中的消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;241publisher实现&#34;&gt;2.4.1.publisher实现&lt;/h3&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立连接&lt;/li&gt;
&lt;li&gt;创建Channel&lt;/li&gt;
&lt;li&gt;声明队列&lt;/li&gt;
&lt;li&gt;发送消息&lt;/li&gt;
&lt;li&gt;关闭连接和channel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.mq.helloworld&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.rabbitmq.client.Channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.rabbitmq.client.Connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.rabbitmq.client.ConnectionFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.concurrent.TimeoutException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PublisherTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testSendMessage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TimeoutException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 1.建立连接
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ConnectionFactory&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ConnectionFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;192.168.150.101&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setPort&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5672&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setVirtualHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setUsername&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;itcast&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setPassword&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;123321&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 1.2.建立连接
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newConnection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 2.创建通道Channel
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Channel&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;channel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;createChannel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 3.创建队列
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queueName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;simple.queue&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;queueDeclare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queueName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 4.发送消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello, rabbitmq!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;basicPublish&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queueName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;发送消息成功：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 5.关闭通道和连接
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;242consumer实现&#34;&gt;2.4.2.consumer实现&lt;/h3&gt;
&lt;p&gt;代码思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立连接&lt;/li&gt;
&lt;li&gt;创建Channel&lt;/li&gt;
&lt;li&gt;声明队列&lt;/li&gt;
&lt;li&gt;订阅消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.mq.helloworld&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.rabbitmq.client.*&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.concurrent.TimeoutException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ConsumerTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TimeoutException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 1.建立连接
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ConnectionFactory&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ConnectionFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;192.168.150.101&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setPort&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5672&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setVirtualHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setUsername&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;itcast&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setPassword&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;123321&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 1.2.建立连接
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newConnection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 2.创建通道Channel
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Channel&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;channel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;createChannel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 3.创建队列
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queueName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;simple.queue&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;queueDeclare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queueName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 4.订阅消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;basicConsume&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queueName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DefaultConsumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
            &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handleDelivery&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;consumerTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Envelope&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;envelope&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
                                       &lt;span class=&#34;n&#34;&gt;AMQP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;BasicProperties&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// 5.处理消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;接收到消息：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;等待接收消息。。。。&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;25总结&#34;&gt;2.5.总结&lt;/h2&gt;
&lt;p&gt;基本消息队列的消息发送流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;建立connection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建channel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用channel声明队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用channel向队列发送消息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本消息队列的消息接收流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;建立connection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建channel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用channel声明队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义consumer的消费行为handleDelivery()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用channel将消费者与队列绑定&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;3springamqp&#34;&gt;3.SpringAMQP&lt;/h1&gt;
&lt;p&gt;SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。&lt;/p&gt;
&lt;p&gt;SpringAmqp的官方地址：https://spring.io/projects/spring-amqp&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717164024967.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717164024967.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717164024967&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717164024967&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717164038678.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717164038678.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717164038678&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717164038678&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;SpringAMQP提供了三个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动声明队列、交换机及其绑定关系&lt;/li&gt;
&lt;li&gt;基于注解的监听器模式，异步接收消息&lt;/li&gt;
&lt;li&gt;封装了RabbitTemplate工具，用于发送消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;31basic-queue-简单队列模型&#34;&gt;3.1.Basic Queue 简单队列模型&lt;/h2&gt;
&lt;p&gt;在父工程mq-demo中引入依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!--AMQP依赖，包含RabbitMQ--&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-amqp&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;311消息发送&#34;&gt;3.1.1.消息发送&lt;/h3&gt;
&lt;p&gt;首先配置MQ地址，在publisher服务的application.yml中添加配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rabbitmq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168.150.101&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 主机名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5672&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 端口&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual-host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 虚拟主机&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;itcast&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 用户名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;123321&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 密码&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.mq.spring&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.amqp.rabbit.core.RabbitTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.test.context.SpringBootTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.test.context.junit4.SpringRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@RunWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SpringRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SpringAmqpTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RabbitTemplate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rabbitTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testSimpleQueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 队列名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queueName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;simple.queue&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello, spring amqp!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 发送消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;rabbitTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;convertAndSend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queueName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;312消息接收&#34;&gt;3.1.2.消息接收&lt;/h3&gt;
&lt;p&gt;首先配置MQ地址，在consumer服务的application.yml中添加配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rabbitmq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168.150.101&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 主机名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5672&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 端口&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual-host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 虚拟主机&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;itcast&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 用户名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;123321&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 密码&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在consumer服务的&lt;code&gt;cn.itcast.mq.listener&lt;/code&gt;包中新建一个类SpringRabbitListener，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.mq.listener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.amqp.rabbit.annotation.RabbitListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SpringRabbitListener&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@RabbitListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queues&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;simple.queue&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;listenSimpleQueueMessage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;spring 消费者接收到消息：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;313测试&#34;&gt;3.1.3.测试&lt;/h3&gt;
&lt;p&gt;启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息&lt;/p&gt;
&lt;h2 id=&#34;32workqueue&#34;&gt;3.2.WorkQueue&lt;/h2&gt;
&lt;p&gt;Work queues，也被称为（Task queues），任务模型。简单来说就是&lt;strong&gt;让多个消费者绑定到一个队列，共同消费队列中的消息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717164238910.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717164238910.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717164238910&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717164238910&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。&lt;/p&gt;
&lt;p&gt;此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。&lt;/p&gt;
&lt;h3 id=&#34;321消息发送&#34;&gt;3.2.1.消息发送&lt;/h3&gt;
&lt;p&gt;这次我们循环发送，模拟大量消息堆积现象。&lt;/p&gt;
&lt;p&gt;在publisher服务中的SpringAmqpTest类中添加一个测试方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * workQueue
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * 向队列中不停发送消息，模拟消息堆积。
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testWorkQueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 队列名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queueName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;simple.queue&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello, message_&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 发送消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;rabbitTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;convertAndSend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queueName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;322消息接收&#34;&gt;3.2.2.消息接收&lt;/h3&gt;
&lt;p&gt;要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@RabbitListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queues&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;simple.queue&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;listenWorkQueue1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;消费者1接收到消息：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@RabbitListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queues&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;simple.queue&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;listenWorkQueue2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;消费者2........接收到消息：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到这个消费者sleep了1000秒，模拟任务耗时。&lt;/p&gt;
&lt;h3 id=&#34;323测试&#34;&gt;3.2.3.测试&lt;/h3&gt;
&lt;p&gt;启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。&lt;/p&gt;
&lt;p&gt;可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。&lt;/p&gt;
&lt;p&gt;也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。&lt;/p&gt;
&lt;h3 id=&#34;324能者多劳&#34;&gt;3.2.4.能者多劳&lt;/h3&gt;
&lt;p&gt;在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rabbitmq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;simple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 每次只能获取一条消息，处理完成才能获取下一个消息&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;325总结&#34;&gt;3.2.5.总结&lt;/h3&gt;
&lt;p&gt;Work模型的使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个消费者绑定到一个队列，同一条消息只会被一个消费者处理&lt;/li&gt;
&lt;li&gt;通过设置prefetch来控制消费者预取的消息数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;33发布订阅&#34;&gt;3.3.发布/订阅&lt;/h2&gt;
&lt;p&gt;发布订阅的模型如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717165309625.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717165309625.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717165309625&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717165309625&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）&lt;/li&gt;
&lt;li&gt;Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：
&lt;ul&gt;
&lt;li&gt;Fanout：广播，将消息交给所有绑定到交换机的队列&lt;/li&gt;
&lt;li&gt;Direct：定向，把消息交给符合指定routing key 的队列&lt;/li&gt;
&lt;li&gt;Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consumer：消费者，与以前一样，订阅队列，没有变化&lt;/li&gt;
&lt;li&gt;Queue：消息队列也与以前一样，接收消息、缓存消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Exchange（交换机）只负责转发消息，不具备存储消息的能力&lt;/strong&gt;，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！&lt;/p&gt;
&lt;h2 id=&#34;34fanout&#34;&gt;3.4.Fanout&lt;/h2&gt;
&lt;p&gt;Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717165438225.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717165438225.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717165438225&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717165438225&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在广播模式下，消息发送流程是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）  可以有多个队列&lt;/li&gt;
&lt;li&gt;2）  每个队列都要绑定到Exchange（交换机）&lt;/li&gt;
&lt;li&gt;3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定&lt;/li&gt;
&lt;li&gt;4）  交换机把消息发送给绑定过的所有队列&lt;/li&gt;
&lt;li&gt;5）  订阅队列的消费者都能拿到消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的计划是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个交换机 itcast.fanout，类型是Fanout&lt;/li&gt;
&lt;li&gt;创建两个队列fanout.queue1和fanout.queue2，绑定到交换机itcast.fanout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717165509466.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717165509466.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717165509466&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717165509466&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;341声明队列和交换机&#34;&gt;3.4.1.声明队列和交换机&lt;/h3&gt;
&lt;p&gt;Spring提供了一个接口Exchange，来表示所有不同类型的交换机：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717165552676.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717165552676.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717165552676&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717165552676&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在consumer中创建一个类，声明队列和交换机：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.mq.config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.amqp.core.Binding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.amqp.core.BindingBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.amqp.core.FanoutExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.amqp.core.Queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FanoutConfig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * 声明交换机
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @return Fanout类型交换机
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FanoutExchange&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fanoutExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FanoutExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;itcast.fanout&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * 第1个队列
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Queue&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fanoutQueue1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fanout.queue1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * 绑定队列和交换机
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bindingQueue1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Queue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fanoutQueue1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FanoutExchange&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fanoutExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BindingBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fanoutQueue1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fanoutExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * 第2个队列
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Queue&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fanoutQueue2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fanout.queue2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * 绑定队列和交换机
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bindingQueue2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Queue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fanoutQueue2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FanoutExchange&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fanoutExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BindingBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fanoutQueue2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fanoutExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;342消息发送&#34;&gt;3.4.2.消息发送&lt;/h3&gt;
&lt;p&gt;在publisher服务的SpringAmqpTest类中添加测试方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testFanoutExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 队列名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exchangeName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;itcast.fanout&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello, everyone!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;rabbitTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;convertAndSend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchangeName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;343消息接收&#34;&gt;3.4.3.消息接收&lt;/h3&gt;
&lt;p&gt;在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@RabbitListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queues&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fanout.queue1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;listenFanoutQueue1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;消费者1接收到Fanout消息：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@RabbitListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queues&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fanout.queue2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;listenFanoutQueue2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;消费者2接收到Fanout消息：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;344总结&#34;&gt;3.4.4.总结&lt;/h3&gt;
&lt;p&gt;交换机的作用是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收publisher发送的消息&lt;/li&gt;
&lt;li&gt;将消息按照规则路由到与之绑定的队列&lt;/li&gt;
&lt;li&gt;不能缓存消息，路由失败，消息丢失&lt;/li&gt;
&lt;li&gt;FanoutExchange的会将消息路由到每个绑定的队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;声明队列、交换机、绑定关系的Bean是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Queue&lt;/li&gt;
&lt;li&gt;FanoutExchange&lt;/li&gt;
&lt;li&gt;Binding&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;35direct&#34;&gt;3.5.Direct&lt;/h2&gt;
&lt;p&gt;在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717170041447.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717170041447.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717170041447&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717170041447&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在Direct模型下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队列与交换机的绑定，不能是任意绑定了，而是要指定一个&lt;code&gt;RoutingKey&lt;/code&gt;（路由key）&lt;/li&gt;
&lt;li&gt;消息的发送方在 向 Exchange发送消息时，也必须指定消息的 &lt;code&gt;RoutingKey&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Exchange不再把消息交给每一个绑定的队列，而是根据消息的&lt;code&gt;Routing Key&lt;/code&gt;进行判断，只有队列的&lt;code&gt;Routingkey&lt;/code&gt;与消息的 &lt;code&gt;Routing key&lt;/code&gt;完全一致，才会接收到消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;案例需求如下&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;利用@RabbitListener声明Exchange、Queue、RoutingKey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在publisher中编写测试方法，向itcast. direct发送消息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717170223317.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717170223317.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717170223317&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717170223317&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;351基于注解声明队列和交换机&#34;&gt;3.5.1.基于注解声明队列和交换机&lt;/h3&gt;
&lt;p&gt;基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。&lt;/p&gt;
&lt;p&gt;在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@RabbitListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@QueueBinding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@Queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;direct.queue1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@Exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;itcast.direct&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExchangeTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DIRECT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;listenDirectQueue1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;消费者接收到direct.queue1的消息：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@RabbitListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@QueueBinding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@Queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;direct.queue2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@Exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;itcast.direct&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExchangeTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DIRECT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;yellow&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;listenDirectQueue2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;消费者接收到direct.queue2的消息：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;352消息发送&#34;&gt;3.5.2.消息发送&lt;/h3&gt;
&lt;p&gt;在publisher服务的SpringAmqpTest类中添加测试方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testSendDirectExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 交换机名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exchangeName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;itcast.direct&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 发送消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;rabbitTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;convertAndSend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchangeName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;353总结&#34;&gt;3.5.3.总结&lt;/h3&gt;
&lt;p&gt;描述下Direct交换机与Fanout交换机的差异？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fanout交换机将消息路由给每一个与之绑定的队列&lt;/li&gt;
&lt;li&gt;Direct交换机根据RoutingKey判断路由给哪个队列&lt;/li&gt;
&lt;li&gt;如果多个队列具有相同的RoutingKey，则与Fanout功能类似&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于@RabbitListener注解声明队列和交换机有哪些常见注解？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Queue&lt;/li&gt;
&lt;li&gt;@Exchange&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;36topic&#34;&gt;3.6.Topic&lt;/h2&gt;
&lt;h3 id=&#34;361说明&#34;&gt;3.6.1.说明&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Topic&lt;/code&gt;类型的&lt;code&gt;Exchange&lt;/code&gt;与&lt;code&gt;Direct&lt;/code&gt;相比，都是可以根据&lt;code&gt;RoutingKey&lt;/code&gt;把消息路由到不同的队列。只不过&lt;code&gt;Topic&lt;/code&gt;类型&lt;code&gt;Exchange&lt;/code&gt;可以让队列在绑定&lt;code&gt;Routing key&lt;/code&gt; 的时候使用通配符！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Routingkey&lt;/code&gt; 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： &lt;code&gt;item.insert&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通配符规则：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt;：匹配一个或多个词&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;：匹配不多不少恰好1个词&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;item.#&lt;/code&gt;：能够匹配&lt;code&gt;item.spu.insert&lt;/code&gt; 或者 &lt;code&gt;item.spu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;item.*&lt;/code&gt;：只能匹配&lt;code&gt;item.spu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717170705380.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717170705380.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717170705380&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717170705380&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Queue1：绑定的是&lt;code&gt;china.#&lt;/code&gt; ，因此凡是以 &lt;code&gt;china.&lt;/code&gt;开头的&lt;code&gt;routing key&lt;/code&gt; 都会被匹配到。包括china.news和china.weather&lt;/li&gt;
&lt;li&gt;Queue2：绑定的是&lt;code&gt;#.news&lt;/code&gt; ，因此凡是以 &lt;code&gt;.news&lt;/code&gt;结尾的 &lt;code&gt;routing key&lt;/code&gt; 都会被匹配。包括china.news和japan.news&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;案例需求：&lt;/p&gt;
&lt;p&gt;实现思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;并利用@RabbitListener声明Exchange、Queue、RoutingKey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在publisher中编写测试方法，向itcast. topic发送消息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717170829229.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210717170829229.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717170829229&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717170829229&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;362消息发送&#34;&gt;3.6.2.消息发送&lt;/h3&gt;
&lt;p&gt;在publisher服务的SpringAmqpTest类中添加测试方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * topicExchange
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testSendTopicExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 交换机名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exchangeName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;itcast.topic&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;喜报！孙悟空大战哥斯拉，胜!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 发送消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;rabbitTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;convertAndSend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchangeName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;china.news&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;363消息接收&#34;&gt;3.6.3.消息接收&lt;/h3&gt;
&lt;p&gt;在consumer服务的SpringRabbitListener中添加方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@RabbitListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@QueueBinding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@Queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;topic.queue1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@Exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;itcast.topic&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExchangeTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;TOPIC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;china.#&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;listenTopicQueue1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;消费者接收到topic.queue1的消息：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@RabbitListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@QueueBinding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@Queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;topic.queue2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@Exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;itcast.topic&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExchangeTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;TOPIC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;#.news&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;listenTopicQueue2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;消费者接收到topic.queue2的消息：【&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;】&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;364总结&#34;&gt;3.6.4.总结&lt;/h3&gt;
&lt;p&gt;描述下Direct交换机与Topic交换机的差异？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Topic交换机接收的消息RoutingKey必须是多个单词，以 &lt;code&gt;**.**&lt;/code&gt; 分割&lt;/li&gt;
&lt;li&gt;Topic交换机与队列绑定时的bindingKey可以指定通配符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;：代表0个或多个词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;：代表1个词&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;37消息转换器&#34;&gt;3.7.消息转换器&lt;/h2&gt;
&lt;p&gt;之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20200525170410401.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20200525170410401.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20200525170410401&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20200525170410401&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据体积过大&lt;/li&gt;
&lt;li&gt;有安全漏洞&lt;/li&gt;
&lt;li&gt;可读性差&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来测试一下。&lt;/p&gt;
&lt;h3 id=&#34;371测试默认转换器&#34;&gt;3.7.1.测试默认转换器&lt;/h3&gt;
&lt;p&gt;我们修改消息发送的代码，发送一个Map对象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testSendMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 准备消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Jack&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 发送消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;rabbitTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;convertAndSend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;simple.queue&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;停止consumer服务&lt;/p&gt;
&lt;p&gt;发送消息后查看控制台：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210422232835363.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/RabbitMQ_BLog/image-20210422232835363.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210422232835363&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210422232835363&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;372配置json转换器&#34;&gt;3.7.2.配置JSON转换器&lt;/h3&gt;
&lt;p&gt;显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。&lt;/p&gt;
&lt;p&gt;在publisher和consumer两个服务中都引入依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.dataformat&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-dataformat-xml&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.9.10&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置消息转换器。&lt;/p&gt;
&lt;p&gt;在启动类中添加一个Bean即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MessageConverter&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;jsonMessageConverter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Jackson2JsonMessageConverter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Docker的使用</title>
        <link>https://lzh54080452.github.io/p/docker%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Fri, 24 Dec 2021 14:21:12 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/docker%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/docker.jpeg" alt="Featured image of post Docker的使用" /&gt;&lt;h1 id=&#34;docker&#34;&gt;Docker&lt;/h1&gt;
&lt;h2 id=&#34;11什么是docker&#34;&gt;1.1.什么是Docker&lt;/h2&gt;
&lt;p&gt;微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。&lt;/li&gt;
&lt;li&gt;在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;111应用部署的环境问题&#34;&gt;1.1.1.应用部署的环境问题&lt;/h3&gt;
&lt;p&gt;大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;依赖关系复杂，容易出现兼容性问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发、测试、生产环境有差异&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731141907366.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731141907366.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731141907366&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731141907366&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。&lt;/p&gt;
&lt;h3 id=&#34;112docker解决依赖兼容问题&#34;&gt;1.1.2.Docker解决依赖兼容问题&lt;/h3&gt;
&lt;p&gt;而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？&lt;/p&gt;
&lt;p&gt;Docker为了解决依赖的兼容问题的，采用了两个手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将每个应用放到一个隔离&lt;strong&gt;容器&lt;/strong&gt;去运行，避免互相干扰&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731142219735.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731142219735.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731142219735&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731142219735&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。&lt;/p&gt;
&lt;p&gt;虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？&lt;/p&gt;
&lt;h3 id=&#34;113docker解决操作系统环境差异&#34;&gt;1.1.3.Docker解决操作系统环境差异&lt;/h3&gt;
&lt;p&gt;要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731143401460.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731143401460.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731143401460&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731143401460&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结构包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机硬件：例如CPU、内存、磁盘等&lt;/li&gt;
&lt;li&gt;系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供&lt;strong&gt;内核指令&lt;/strong&gt;，用于操作计算机硬件。&lt;/li&gt;
&lt;li&gt;系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用于计算机交互的流程如下：&lt;/p&gt;
&lt;p&gt;1）应用调用操作系统应用（函数库），实现各种功能&lt;/p&gt;
&lt;p&gt;2）系统函数库是对内核指令集的封装，会调用内核指令&lt;/p&gt;
&lt;p&gt;3）内核指令操作计算机硬件&lt;/p&gt;
&lt;p&gt;Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731144304990.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731144304990.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731144304990&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731144304990&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731144458680.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731144458680.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731144458680&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731144458680&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Docker如何解决不同系统环境的问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包&lt;/li&gt;
&lt;li&gt;Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731144820638.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731144820638.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731144820638&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731144820638&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;114小结&#34;&gt;1.1.4.小结&lt;/h3&gt;
&lt;p&gt;Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker允许开发中将应用、依赖、函数库、配置一起&lt;strong&gt;打包&lt;/strong&gt;，形成可移植镜像&lt;/li&gt;
&lt;li&gt;Docker应用运行在容器中，使用沙箱机制，相互&lt;strong&gt;隔离&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker如何解决开发、测试、生产环境有差异的问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker是一个快速交付应用、运行应用的技术，具备下列优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统&lt;/li&gt;
&lt;li&gt;运行时利用沙箱机制形成隔离容器，各个应用互不干扰&lt;/li&gt;
&lt;li&gt;启动、移除都可以通过一行命令完成，方便快捷&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12docker和虚拟机的区别&#34;&gt;1.2.Docker和虚拟机的区别&lt;/h2&gt;
&lt;p&gt;Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。&lt;/p&gt;
&lt;p&gt;两者有什么差异呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟机&lt;/strong&gt;（virtual machine）是在操作系统中&lt;strong&gt;模拟&lt;/strong&gt;硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;仅仅是封装函数库，并没有模拟完整的操作系统，如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731145914960.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731145914960.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731145914960&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731145914960&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对比来看：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731152243765.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731152243765.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731152243765&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731152243765&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;p&gt;Docker和虚拟机的差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker是一个系统进程；虚拟机是在操作系统中的操作系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13docker架构&#34;&gt;1.3.Docker架构&lt;/h2&gt;
&lt;h3 id=&#34;131镜像和容器&#34;&gt;1.3.1.镜像和容器&lt;/h3&gt;
&lt;p&gt;Docker中有几个重要的概念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;镜像（Image）&lt;/strong&gt;：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器（Container）&lt;/strong&gt;：镜像中的应用程序运行后形成的进程就是&lt;strong&gt;容器&lt;/strong&gt;，只是Docker会给容器进程做隔离，对外不可见。&lt;/p&gt;
&lt;p&gt;一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的&lt;strong&gt;文件&lt;/strong&gt;。只有运行时，才会加载到内存，形成进程。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;镜像&lt;/strong&gt;，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器&lt;/strong&gt;呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731153059464.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731153059464.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731153059464&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731153059464&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;例如你下载了一个QQ，如果我们将QQ在磁盘上的运行&lt;strong&gt;文件&lt;/strong&gt;及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。&lt;/p&gt;
&lt;h3 id=&#34;132dockerhub&#34;&gt;1.3.2.DockerHub&lt;/h3&gt;
&lt;p&gt;开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;国内也有类似于DockerHub 的公开服务，比如 &lt;a class=&#34;link&#34; href=&#34;https://c.163yun.com/hub&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;网易云镜像服务&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://cr.console.aliyun.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;阿里云镜像库&lt;/a&gt;等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731153743354.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731153743354.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731153743354&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731153743354&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;133docker架构&#34;&gt;1.3.3.Docker架构&lt;/h3&gt;
&lt;p&gt;我们要使用Docker来操作镜像、容器，就必须要安装Docker。&lt;/p&gt;
&lt;p&gt;Docker是一个CS架构的程序，由两部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731154257653.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731154257653.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731154257653&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731154257653&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;134小结&#34;&gt;1.3.4.小结&lt;/h3&gt;
&lt;p&gt;镜像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将应用程序及其依赖、环境、配置打包在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像运行起来就是容器，一个镜像可以运行多个容器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务端：接收命令或远程请求，操作镜像或容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端：发送命令或者请求到Docker服务端&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DockerHub：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14安装docker&#34;&gt;1.4.安装Docker&lt;/h2&gt;
&lt;p&gt;企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此我们在CentOS下安装Docker。参考课前资料中的文档：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155002425.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155002425.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731155002425&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731155002425&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;2docker的基本操作&#34;&gt;2.Docker的基本操作&lt;/h1&gt;
&lt;h2 id=&#34;21镜像操作&#34;&gt;2.1.镜像操作&lt;/h2&gt;
&lt;h3 id=&#34;211镜像名称&#34;&gt;2.1.1.镜像名称&lt;/h3&gt;
&lt;p&gt;首先来看下镜像的名称组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜名称一般分两部分组成：[repository]:[tag]。&lt;/li&gt;
&lt;li&gt;在没有指定tag时，默认是latest，代表最新版本的镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155141362.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155141362.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731155141362&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731155141362&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。&lt;/p&gt;
&lt;h3 id=&#34;212镜像命令&#34;&gt;2.1.2.镜像命令&lt;/h3&gt;
&lt;p&gt;常见的镜像操作命令如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155649535.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155649535.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731155649535&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731155649535&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;213案例1-拉取查看镜像&#34;&gt;2.1.3.案例1-拉取、查看镜像&lt;/h3&gt;
&lt;p&gt;需求：从DockerHub中拉取一个nginx镜像并查看&lt;/p&gt;
&lt;p&gt;1）首先去镜像仓库搜索nginx镜像，比如&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DockerHub&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155844368.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155844368.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731155844368&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731155844368&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155856199.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155856199.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731155856199&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731155856199&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3）通过命令：docker images 查看拉取到的镜像&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155903037.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731155903037.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731155903037&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731155903037&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;214案例2-保存导入镜像&#34;&gt;2.1.4.案例2-保存、导入镜像&lt;/h3&gt;
&lt;p&gt;需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来&lt;/p&gt;
&lt;p&gt;1）利用docker xx &amp;ndash;help命令查看docker save和docker load的语法&lt;/p&gt;
&lt;p&gt;例如，查看save命令用法，可以输入命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker save --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731161104732.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731161104732.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731161104732&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731161104732&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker save -o &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;保存的目标文件名称&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;镜像名称&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）使用docker save导出镜像到磁盘&lt;/p&gt;
&lt;p&gt;运行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker save -o nginx.tar nginx:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731161354344.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731161354344.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731161354344&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731161354344&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3）使用docker load加载镜像&lt;/p&gt;
&lt;p&gt;先删除本地的nginx镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker rmi nginx:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后运行命令，加载本地文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker load -i nginx.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731161746245.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731161746245.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731161746245&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731161746245&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;215练习&#34;&gt;2.1.5.练习&lt;/h3&gt;
&lt;p&gt;需求：去DockerHub搜索并拉取一个Redis镜像&lt;/p&gt;
&lt;p&gt;目标：&lt;/p&gt;
&lt;p&gt;1）去DockerHub搜索Redis镜像&lt;/p&gt;
&lt;p&gt;2）查看Redis镜像的名称和版本&lt;/p&gt;
&lt;p&gt;3）利用docker pull命令拉取镜像&lt;/p&gt;
&lt;p&gt;4）利用docker save命令将 redis:latest打包为一个redis.tar包&lt;/p&gt;
&lt;p&gt;5）利用docker rmi 删除本地的redis:latest&lt;/p&gt;
&lt;p&gt;6）利用docker load 重新加载 redis.tar文件&lt;/p&gt;
&lt;h2 id=&#34;22容器操作&#34;&gt;2.2.容器操作&lt;/h2&gt;
&lt;h3 id=&#34;221容器相关命令&#34;&gt;2.2.1.容器相关命令&lt;/h3&gt;
&lt;p&gt;容器操作的命令如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731161950495.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731161950495.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731161950495&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731161950495&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;容器保护三个状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行：进程正常运行&lt;/li&gt;
&lt;li&gt;暂停：进程暂停，CPU不再运行，并不释放内存&lt;/li&gt;
&lt;li&gt;停止：进程终止，回收进程占用的内存、CPU等资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker run：创建并运行一个容器，处于运行状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker pause：让一个运行的容器暂停&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker unpause：让一个容器从暂停状态恢复运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker stop：停止一个运行的容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker start：让一个停止的容器再次运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker rm：删除一个容器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;222案例-创建并运行一个容器&#34;&gt;2.2.2.案例-创建并运行一个容器&lt;/h3&gt;
&lt;p&gt;创建并运行nginx容器的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run --name containerName -p 80:80 -d nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令解读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker run ：创建并运行一个容器&lt;/li&gt;
&lt;li&gt;&amp;ndash;name : 给容器起一个名字，比如叫做mn&lt;/li&gt;
&lt;li&gt;-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口&lt;/li&gt;
&lt;li&gt;-d：后台运行容器&lt;/li&gt;
&lt;li&gt;nginx：镜像名称，例如nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的&lt;code&gt;-p&lt;/code&gt;参数，是将容器端口映射到宿主机端口。&lt;/p&gt;
&lt;p&gt;默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。&lt;/p&gt;
&lt;p&gt;现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731163255863.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731163255863.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731163255863&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731163255863&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;223案例-进入容器修改文件&#34;&gt;2.2.3.案例-进入容器，修改文件&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：进入容器要用到docker exec命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1）进入容器。进入我们刚刚创建的nginx容器的命令为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it mn bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令解读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker exec ：进入容器内部，执行一个命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mn ：要进入的容器的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bash：进入容器后执行的命令，bash是一个linux终端交互命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2）进入nginx的HTML所在目录 /usr/share/nginx/html&lt;/p&gt;
&lt;p&gt;容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731164159811.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731164159811.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731164159811&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731164159811&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。&lt;/p&gt;
&lt;p&gt;查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在&lt;code&gt;/usr/share/nginx/html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们执行命令，进入该目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /usr/share/nginx/html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看目录下文件：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731164455818.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731164455818.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731164455818&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731164455818&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3）修改index.html的内容&lt;/p&gt;
&lt;p&gt;容器内没有vi命令，无法直接修改，我们用下面的命令来修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sed -i -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s#Welcome to nginx#传智教育欢迎您#g&amp;#39;&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s#&amp;lt;head&amp;gt;#&amp;lt;head&amp;gt;&amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt;#g&amp;#39;&lt;/span&gt; index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在浏览器访问自己的虚拟机地址，例如我的是：http://192.168.150.101，即可看到结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731164717604.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731164717604.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731164717604&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731164717604&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;224小结&#34;&gt;2.2.4.小结&lt;/h3&gt;
&lt;p&gt;docker run命令的常见参数有哪些？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ndash;name：指定容器名称&lt;/li&gt;
&lt;li&gt;-p：指定端口映射&lt;/li&gt;
&lt;li&gt;-d：让容器后台运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看容器日志的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker logs&lt;/li&gt;
&lt;li&gt;添加 -f 参数可以持续查看日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看容器状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker ps&lt;/li&gt;
&lt;li&gt;docker ps -a 查看所有容器，包括已经停止的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23数据卷容器数据管理&#34;&gt;2.3.数据卷（容器数据管理）&lt;/h2&gt;
&lt;p&gt;在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。&lt;/p&gt;
&lt;p&gt;这就是因为容器与数据（容器内文件）耦合带来的后果。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731172440275.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731172440275.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731172440275&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731172440275&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。&lt;/p&gt;
&lt;h3 id=&#34;231什么是数据卷&#34;&gt;2.3.1.什么是数据卷&lt;/h3&gt;
&lt;p&gt;**数据卷（volume）**是一个虚拟目录，指向宿主机文件系统中的某个目录。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731173541846.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731173541846.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731173541846&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731173541846&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。&lt;/p&gt;
&lt;p&gt;这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了&lt;/p&gt;
&lt;h3 id=&#34;232数据集操作命令&#34;&gt;2.3.2.数据集操作命令&lt;/h3&gt;
&lt;p&gt;数据卷操作的基本语法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker volume &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;COMMAND&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create 创建一个volume&lt;/li&gt;
&lt;li&gt;inspect 显示一个或多个volume的信息&lt;/li&gt;
&lt;li&gt;ls 列出所有的volume&lt;/li&gt;
&lt;li&gt;prune 删除未使用的volume&lt;/li&gt;
&lt;li&gt;rm 删除一个或多个指定的volume&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;233创建和查看数据卷&#34;&gt;2.3.3.创建和查看数据卷&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：创建一个数据卷，并查看数据卷在宿主机的目录位置&lt;/p&gt;
&lt;p&gt;① 创建数据卷&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker volume create html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;② 查看所有数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker volume ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731173746910.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731173746910.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731173746910&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731173746910&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;③ 查看数据卷详细信息卷&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker volume inspect html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731173809877.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731173809877.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731173809877&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731173809877&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，我们创建的html这个数据卷关联的宿主机目录为&lt;code&gt;/var/lib/docker/volumes/html/_data&lt;/code&gt;目录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;数据卷的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据卷操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker volume create：创建数据卷&lt;/li&gt;
&lt;li&gt;docker volume ls：查看所有数据卷&lt;/li&gt;
&lt;li&gt;docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置&lt;/li&gt;
&lt;li&gt;docker volume rm：删除指定数据卷&lt;/li&gt;
&lt;li&gt;docker volume prune：删除所有未使用的数据卷&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;234挂载数据卷&#34;&gt;2.3.4.挂载数据卷&lt;/h3&gt;
&lt;p&gt;我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --name mn &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -v html:/root/html &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -p 8080:80
  nginx &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的-v就是挂载数据卷的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-v html:/root/htm&lt;/code&gt; ：把html数据卷挂载到容器内的/root/html这个目录中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;235案例-给nginx挂载数据卷&#34;&gt;2.3.5.案例-给nginx挂载数据卷&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：创建一个nginx容器，修改容器内的html目录内的index.html内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：运行容器时使用 -v 参数挂载数据卷&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;① 创建容器并挂载数据卷到容器内的HTML目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;② 进入html数据卷所在位置，并修改HTML内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看html数据卷的位置&lt;/span&gt;
docker volume inspect html
&lt;span class=&#34;c1&#34;&gt;# 进入该目录&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /var/lib/docker/volumes/html/_data
&lt;span class=&#34;c1&#34;&gt;# 修改文件&lt;/span&gt;
vi index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;236案例-给mysql挂载本地目录&#34;&gt;2.3.6.案例-给MySQL挂载本地目录&lt;/h3&gt;
&lt;p&gt;容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带数据卷模式：宿主机目录 &amp;ndash;&amp;gt; 数据卷 &amp;mdash;&amp;gt; 容器内目录&lt;/li&gt;
&lt;li&gt;直接挂载模式：宿主机目录 &amp;mdash;&amp;gt; 容器内目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731175155453.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731175155453.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731175155453&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731175155453&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;目录挂载与数据卷挂载的语法是类似的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v [宿主机目录]:[容器内目录]&lt;/li&gt;
&lt;li&gt;-v [宿主机文件]:[容器内文件]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器&lt;/p&gt;
&lt;p&gt;实现思路如下：&lt;/p&gt;
&lt;p&gt;1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像&lt;/p&gt;
&lt;p&gt;2）创建目录/tmp/mysql/data&lt;/p&gt;
&lt;p&gt;3）创建目录/tmp/mysql/conf，将课前资料提供的hmy.cnf文件上传到/tmp/mysql/conf&lt;/p&gt;
&lt;p&gt;4）去DockerHub查阅资料，创建并运行MySQL容器，要求：&lt;/p&gt;
&lt;p&gt;① 挂载/tmp/mysql/data到mysql容器内数据存储目录&lt;/p&gt;
&lt;p&gt;② 挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件&lt;/p&gt;
&lt;p&gt;③ 设置MySQL密码&lt;/p&gt;
&lt;h3 id=&#34;237小结&#34;&gt;2.3.7.小结&lt;/h3&gt;
&lt;p&gt;docker run的命令中通过 -v 参数挂载文件或目录到容器中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v volume名称:容器内目录&lt;/li&gt;
&lt;li&gt;-v 宿主机文件:容器内文&lt;/li&gt;
&lt;li&gt;-v 宿主机目录:容器内目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据卷挂载与目录直接挂载的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找&lt;/li&gt;
&lt;li&gt;目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3dockerfile自定义镜像&#34;&gt;3.Dockerfile自定义镜像&lt;/h1&gt;
&lt;p&gt;常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。&lt;/p&gt;
&lt;p&gt;而要自定义镜像，就必须先了解镜像的结构才行。&lt;/p&gt;
&lt;h2 id=&#34;31镜像结构&#34;&gt;3.1.镜像结构&lt;/h2&gt;
&lt;p&gt;镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。&lt;/p&gt;
&lt;p&gt;我们以MySQL为例，来看看镜像的组成结构：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731175806273.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731175806273.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731175806273&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731175806273&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。&lt;/p&gt;
&lt;p&gt;我们要构建镜像，其实就是实现上述打包的过程。&lt;/p&gt;
&lt;h2 id=&#34;32dockerfile语法&#34;&gt;3.2.Dockerfile语法&lt;/h2&gt;
&lt;p&gt;构建自定义的镜像时，并不需要一个个文件去拷贝，打包。&lt;/p&gt;
&lt;p&gt;我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。&lt;/p&gt;
&lt;p&gt;而描述上述信息的文件就是Dockerfile文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;就是一个文本文件，其中包含一个个的&lt;strong&gt;指令(Instruction)&lt;/strong&gt;，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731180321133.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731180321133.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731180321133&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731180321133&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更新详细语法说明，请参考官网文档： &lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/reference/builder&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/engine/reference/builder&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;33构建java项目&#34;&gt;3.3.构建Java项目&lt;/h2&gt;
&lt;h3 id=&#34;331基于ubuntu构建java项目&#34;&gt;3.3.1.基于Ubuntu构建Java项目&lt;/h3&gt;
&lt;p&gt;需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;步骤1：新建一个空文件夹docker-demo&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801101207444.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801101207444.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801101207444&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801101207444&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801101314816.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801101314816.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801101314816&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801101314816&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801101410200.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801101410200.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801101410200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801101410200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801101455590.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801101455590.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801101455590&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801101455590&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中的内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 指定基础镜像&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:16.04&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 配置环境变量，JDK的安装目录&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;JAVA_DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 拷贝jdk和java项目的包&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; ./jdk8.tar.gz &lt;span class=&#34;nv&#34;&gt;$JAVA_DIR&lt;/span&gt;/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; ./docker-demo.jar /tmp/app.jar&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 安装JDK&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$JAVA_DIR&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -xf ./jdk8.tar.gz &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv ./jdk1.8.0_144 ./java8&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 配置环境变量&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$JAVA_DIR&lt;/span&gt;/java8&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$JAVA_HOME&lt;/span&gt;/bin&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 暴露端口&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 8090&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 入口，java项目的启动命令&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENTRYPOINT&lt;/span&gt; java -jar /tmp/app.jar&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤5：进入docker-demo&lt;/p&gt;
&lt;p&gt;将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤6：运行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker build -t javaweb:1.0 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后访问 http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip&lt;/p&gt;
&lt;h3 id=&#34;332基于java8构建java项目&#34;&gt;3.3.2.基于java8构建Java项目&lt;/h3&gt;
&lt;p&gt;虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。&lt;/p&gt;
&lt;p&gt;例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。&lt;/p&gt;
&lt;p&gt;需求：基于java:8-alpine镜像，将一个Java项目构建为镜像&lt;/p&gt;
&lt;p&gt;实现思路如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;② 拷贝课前资料提供的docker-demo.jar到这个目录中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;③ 编写Dockerfile文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a ）基于java:8-alpine作为基础镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b ）将app.jar拷贝到镜像中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c ）暴露端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d ）编写入口ENTRYPOINT&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; java:8-alpine&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; ./app.jar /tmp/app.jar&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 8090&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENTRYPOINT&lt;/span&gt; java -jar /tmp/app.jar&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;④ 使用docker build命令构建镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⑤ 使用docker run创建容器并运行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;34小结&#34;&gt;3.4.小结&lt;/h2&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Dockerfile的本质是一个文件，通过指令描述镜像的构建过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dockerfile的第一行必须是FROM，从一个基础镜像来构建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;4docker-compose&#34;&gt;4.Docker-Compose&lt;/h1&gt;
&lt;p&gt;Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731180921742.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731180921742.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731180921742&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731180921742&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;41初识dockercompose&#34;&gt;4.1.初识DockerCompose&lt;/h2&gt;
&lt;p&gt;Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;version:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;3.8&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;err&#34;&gt;services:&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;mysql:&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;mysql:&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.7&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;environment:&lt;/span&gt;
     &lt;span class=&#34;err&#34;&gt;MYSQL_ROOT_PASSWORD:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt; 
    &lt;span class=&#34;err&#34;&gt;volumes:&lt;/span&gt;
     &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/mysql/data:/var/lib/mysql&amp;#34;&lt;/span&gt;
     &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;web:&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;build:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;ports:&lt;/span&gt;
     &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;8090:8090&amp;#34;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的Compose文件就描述一个项目，其中包含两个容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql：一个基于&lt;code&gt;mysql:5.7.25&lt;/code&gt;镜像构建的容器，并且挂载了两个目录&lt;/li&gt;
&lt;li&gt;web：一个基于&lt;code&gt;docker build&lt;/code&gt;临时构建的镜像容器，映射端口时8090&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DockerCompose的详细语法参考官网：https://docs.docker.com/compose/compose-file/&lt;/p&gt;
&lt;p&gt;其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。&lt;/p&gt;
&lt;h2 id=&#34;42安装dockercompose&#34;&gt;4.2.安装DockerCompose&lt;/h2&gt;
&lt;p&gt;参考课前资料&lt;/p&gt;
&lt;h2 id=&#34;43部署微服务集群&#34;&gt;4.3.部署微服务集群&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：将之前学习的cloud-demo微服务集群利用DockerCompose部署&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现思路&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件&lt;/p&gt;
&lt;p&gt;② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名&lt;/p&gt;
&lt;p&gt;③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar&lt;/p&gt;
&lt;p&gt;④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中&lt;/p&gt;
&lt;p&gt;⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署&lt;/p&gt;
&lt;h3 id=&#34;431compose文件&#34;&gt;4.3.1.compose文件&lt;/h3&gt;
&lt;p&gt;查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731181341330.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210731181341330.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210731181341330&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210731181341330&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3.2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nacos/nacos-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;MODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;standalone&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;8848:8848&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mysql:5.7.25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;$PWD/mysql/data:/var/lib/mysql&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;$PWD/mysql/conf:/etc/mysql/conf.d/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;userservice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;./user-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;orderservice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;./order-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;./gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;10010:10010&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，其中包含5个service服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nacos&lt;/code&gt;：作为注册中心和配置中心
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;image: nacos/nacos-server&lt;/code&gt;： 基于nacos/nacos-server镜像构建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt;：环境变量
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MODE: standalone&lt;/code&gt;：单点模式启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt;：端口映射，这里暴露了8848端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql&lt;/code&gt;：数据库
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;image: mysql:5.7.25&lt;/code&gt;：镜像版本是mysql:5.7.25&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt;：环境变量
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MYSQL_ROOT_PASSWORD: 123&lt;/code&gt;：设置数据库root账户的密码为123&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt;：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;userservice&lt;/code&gt;、&lt;code&gt;orderservice&lt;/code&gt;、&lt;code&gt;gateway&lt;/code&gt;：都是基于Dockerfile临时构建的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801095205034.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801095205034.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801095205034&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801095205034&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看微服务目录，可以看到都包含Dockerfile文件：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801095320586.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801095320586.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801095320586&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801095320586&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; java:8-alpine&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; ./app.jar /tmp/app.jar&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENTRYPOINT&lt;/span&gt; java -jar /tmp/app.jar&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;432修改微服务配置&#34;&gt;4.3.2.修改微服务配置&lt;/h3&gt;
&lt;p&gt;因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。&lt;/p&gt;
&lt;p&gt;如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;datasource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;jdbc:mysql://mysql:3306/cloud_order?useSSL=false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;driver-class-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;com.mysql.jdbc.Driver&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;orderservice&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server-addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nacos:8848&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# nacos服务地址&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;433打包&#34;&gt;4.3.3.打包&lt;/h3&gt;
&lt;p&gt;接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。&lt;/p&gt;
&lt;p&gt;可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- 服务打包的最终名称 --&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;app&lt;span class=&#34;nt&#34;&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打包后：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801095951030.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801095951030.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801095951030&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801095951030&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;434拷贝jar包到部署目录&#34;&gt;4.3.4.拷贝jar包到部署目录&lt;/h3&gt;
&lt;p&gt;编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。&lt;/p&gt;
&lt;p&gt;user-service：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801100201253.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801100201253.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801100201253&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801100201253&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;order-service：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801100231495.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801100231495.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801100231495&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801100231495&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;gateway：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801100308102.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801100308102.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801100308102&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801100308102&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;435部署&#34;&gt;4.3.5.部署&lt;/h3&gt;
&lt;p&gt;最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。&lt;/p&gt;
&lt;p&gt;上传到任意目录：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801100955653.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/Docker_BLog/image-20210801100955653.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210801100955653&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210801100955653&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;部署：&lt;/p&gt;
&lt;p&gt;进入cloud-demo目录，然后运行下面的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;5docker镜像仓库&#34;&gt;5.Docker镜像仓库&lt;/h1&gt;
&lt;h2 id=&#34;51搭建私有镜像仓库&#34;&gt;5.1.搭建私有镜像仓库&lt;/h2&gt;
&lt;p&gt;参考课前资料《CentOS7安装Docker.md》&lt;/p&gt;
&lt;h2 id=&#34;52推送拉取镜像&#34;&gt;5.2.推送、拉取镜像&lt;/h2&gt;
&lt;p&gt;推送镜像到私有镜像服务必须先tag，步骤如下：&lt;/p&gt;
&lt;p&gt;① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;② 推送镜像&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker push 192.168.150.101:8080/nginx:1.0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;③ 拉取镜像&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker pull 192.168.150.101:8080/nginx:1.0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>SpringCloud微服务</title>
        <link>https://lzh54080452.github.io/p/springcloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
        <pubDate>Fri, 24 Dec 2021 13:48:37 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/springcloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/spring_cloud.png" alt="Featured image of post SpringCloud微服务" /&gt;&lt;h1 id=&#34;认识微服务&#34;&gt;认识微服务&lt;/h1&gt;
&lt;p&gt;随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？&lt;/p&gt;
&lt;h2 id=&#34;10学习目标&#34;&gt;1.0.学习目标&lt;/h2&gt;
&lt;p&gt;了解微服务架构的优缺点&lt;/p&gt;
&lt;h2 id=&#34;11单体架构&#34;&gt;1.1.单体架构&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;单体架构&lt;/strong&gt;：将业务的所有功能集中在一个项目中开发，打成一个包部署。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713202807818.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713202807818.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713202807818&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713202807818&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;单体架构的优缺点如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;架构简单&lt;/li&gt;
&lt;li&gt;部署成本低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;耦合度高（维护困难、升级困难）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12分布式架构&#34;&gt;1.2.分布式架构&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;分布式架构&lt;/strong&gt;：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713203124797.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713203124797.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713203124797&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713203124797&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;分布式架构的优缺点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;降低服务耦合&lt;/li&gt;
&lt;li&gt;有利于服务升级和拓展&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务调用关系错综复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务拆分的粒度如何界定？&lt;/li&gt;
&lt;li&gt;服务之间如何调用？&lt;/li&gt;
&lt;li&gt;服务的调用关系如何管理？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人们需要制定一套行之有效的标准来约束分布式架构。&lt;/p&gt;
&lt;h2 id=&#34;13微服务&#34;&gt;1.3.微服务&lt;/h2&gt;
&lt;p&gt;微服务的架构特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责&lt;/li&gt;
&lt;li&gt;自治：团队独立、技术独立、数据独立，独立部署和交付&lt;/li&gt;
&lt;li&gt;面向服务：服务提供统一标准的接口，与语言和技术无关&lt;/li&gt;
&lt;li&gt;隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713203753373.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713203753373.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713203753373&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713203753373&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。&lt;/p&gt;
&lt;p&gt;因此，可以认为&lt;strong&gt;微服务&lt;/strong&gt;是一种经过良好架构设计的&lt;strong&gt;分布式架构方案&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;但方案该怎么落地？选用什么样的技术栈？全球的互联网公司都在积极尝试自己的微服务落地方案。&lt;/p&gt;
&lt;p&gt;其中在Java领域最引人注目的就是SpringCloud提供的方案了。&lt;/p&gt;
&lt;h2 id=&#34;14springcloud&#34;&gt;1.4.SpringCloud&lt;/h2&gt;
&lt;p&gt;SpringCloud是目前国内使用最广泛的微服务框架。官网地址：https://spring.io/projects/spring-cloud。&lt;/p&gt;
&lt;p&gt;SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。&lt;/p&gt;
&lt;p&gt;其中常见的组件包括：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713204155887.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713204155887.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713204155887&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713204155887&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外，SpringCloud底层是依赖于SpringBoot的，并且有版本的兼容关系，如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713205003790.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713205003790.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713205003790&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713205003790&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们课堂学习的版本是 Hoxton.SR10，因此对应的SpringBoot版本是2.3.x版本。&lt;/p&gt;
&lt;h2 id=&#34;15总结&#34;&gt;1.5.总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微服务：一种良好的分布式架构方案&lt;/p&gt;
&lt;p&gt;①优点：拆分粒度更小、服务更独立、耦合度更低&lt;/p&gt;
&lt;p&gt;②缺点：架构非常复杂，运维、监控、部署难度提高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2服务拆分和远程调用&#34;&gt;2.服务拆分和远程调用&lt;/h1&gt;
&lt;p&gt;任何分布式架构都离不开服务的拆分，微服务也是一样。&lt;/p&gt;
&lt;h2 id=&#34;21服务拆分原则&#34;&gt;2.1.服务拆分原则&lt;/h2&gt;
&lt;p&gt;这里我总结了微服务拆分时的几个原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同微服务，不要重复开发相同业务&lt;/li&gt;
&lt;li&gt;微服务数据独立，不要访问其它微服务的数据库&lt;/li&gt;
&lt;li&gt;微服务可以将自己的业务暴露为接口，供其它微服务调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713210800950.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713210800950.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713210800950&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713210800950&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;22服务拆分示例&#34;&gt;2.2.服务拆分示例&lt;/h2&gt;
&lt;p&gt;以课前资料中的微服务cloud-demo为例，其结构如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713211009593.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713211009593.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713211009593&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713211009593&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;cloud-demo：父工程，管理依赖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order-service：订单微服务，负责订单相关业务&lt;/li&gt;
&lt;li&gt;user-service：用户微服务，负责用户相关业务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订单微服务和用户微服务都必须有各自的数据库，相互独立&lt;/li&gt;
&lt;li&gt;订单服务和用户服务都对外暴露Restful的接口&lt;/li&gt;
&lt;li&gt;订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;221导入sql语句&#34;&gt;2.2.1.导入Sql语句&lt;/h3&gt;
&lt;p&gt;首先，将课前资料提供的&lt;code&gt;cloud-order.sql&lt;/code&gt;和&lt;code&gt;cloud-user.sql&lt;/code&gt;导入到mysql中：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713211417049.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713211417049.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713211417049&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713211417049&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;cloud-user表中初始数据如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713211550169.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713211550169.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713211550169&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713211550169&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;cloud-order表中初始数据如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713211657319.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713211657319.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713211657319&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713211657319&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;cloud-order表中持有cloud-user表中的id字段。&lt;/p&gt;
&lt;h3 id=&#34;222导入demo工程&#34;&gt;2.2.2.导入demo工程&lt;/h3&gt;
&lt;p&gt;用IDEA导入课前资料提供的Demo：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713211814094.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713211814094.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713211814094&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713211814094&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;项目结构如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212656887.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212656887.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713212656887&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713212656887&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;导入后，会在IDEA右下角出现弹窗：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212349272.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212349272.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713212349272&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713212349272&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击弹窗，然后按下图选择：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212336185.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212336185.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713212336185&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713212336185&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;会出现这样的菜单：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212513324.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212513324.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713212513324&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713212513324&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置下项目使用的JDK：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713220736408.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713220736408.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713220736408&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713220736408&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;23实现远程调用案例&#34;&gt;2.3.实现远程调用案例&lt;/h2&gt;
&lt;p&gt;在order-service服务中，有一个根据id查询订单的接口：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212749575.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212749575.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713212749575&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713212749575&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;根据id查询订单，返回值是Order对象，如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212901725.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713212901725.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713212901725&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713212901725&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中的user为null&lt;/p&gt;
&lt;p&gt;在user-service中有一个根据id查询用户的接口：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713213146089.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713213146089.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713213146089&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713213146089&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查询的结果如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713213213075.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713213213075.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713213213075&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713213213075&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;231案例需求&#34;&gt;2.3.1.案例需求：&lt;/h3&gt;
&lt;p&gt;修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713213312278.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713213312278.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713213312278&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713213312278&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，我们需要在order-service中 向user-service发起一个http的请求，调用http://localhost:8081/user/{userId}这个接口。&lt;/p&gt;
&lt;p&gt;大概的步骤是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册一个RestTemplate的实例到Spring容器&lt;/li&gt;
&lt;li&gt;修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User&lt;/li&gt;
&lt;li&gt;将查询的User填充到Order对象，一起返回&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;232注册resttemplate&#34;&gt;2.3.2.注册RestTemplate&lt;/h3&gt;
&lt;p&gt;首先，我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.mybatis.spring.annotation.MapperScan&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.client.RestTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@MapperScan&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cn.itcast.order.mapper&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;OrderApplication&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestTemplate&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;restTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;233实现远程调用&#34;&gt;2.3.3.实现远程调用&lt;/h3&gt;
&lt;p&gt;修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713213959569.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713213959569.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713213959569&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713213959569&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;24提供者与消费者&#34;&gt;2.4.提供者与消费者&lt;/h2&gt;
&lt;p&gt;在服务调用关系中，会有两个不同的角色：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务提供者&lt;/strong&gt;：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务消费者&lt;/strong&gt;：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713214404481.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713214404481.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713214404481&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713214404481&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。&lt;/p&gt;
&lt;p&gt;如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于A调用B的业务而言：A是服务消费者，B是服务提供者&lt;/li&gt;
&lt;li&gt;对于B调用C的业务而言：B是服务消费者，C是服务提供者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，服务B既可以是服务提供者，也可以是服务消费者。&lt;/p&gt;
&lt;h1 id=&#34;3eureka注册中心&#34;&gt;3.Eureka注册中心&lt;/h1&gt;
&lt;p&gt;假如我们的服务提供者user-service部署了多个实例，如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713214925388.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713214925388.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713214925388&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713214925388&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大家思考几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？&lt;/li&gt;
&lt;li&gt;有多个user-service实例地址，order-service调用时该如何选择？&lt;/li&gt;
&lt;li&gt;order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;31eureka的结构和作用&#34;&gt;3.1.Eureka的结构和作用&lt;/h2&gt;
&lt;p&gt;这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713220104956.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713220104956.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713220104956&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713220104956&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;回答之前的各个问题。&lt;/p&gt;
&lt;p&gt;问题1：order-service如何得知user-service实例地址？&lt;/p&gt;
&lt;p&gt;获取地址信息的流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫服务注册&lt;/li&gt;
&lt;li&gt;eureka-server保存服务名称到服务实例地址列表的映射关系&lt;/li&gt;
&lt;li&gt;order-service根据服务名称，拉取实例地址列表。这个叫服务发现或服务拉取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题2：order-service如何从多个user-service实例中选择具体的实例？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order-service从实例列表中利用负载均衡算法选中一个实例地址&lt;/li&gt;
&lt;li&gt;向该实例地址发起远程调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题3：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳&lt;/li&gt;
&lt;li&gt;当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除&lt;/li&gt;
&lt;li&gt;order-service拉取服务时，就能将故障实例排除了&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，接下来我们动手实践的步骤包括：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713220509769.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713220509769.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713220509769&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713220509769&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;32搭建eureka-server&#34;&gt;3.2.搭建eureka-server&lt;/h2&gt;
&lt;p&gt;首先大家注册中心服务端：eureka-server，这必须是一个独立的微服务&lt;/p&gt;
&lt;h3 id=&#34;321创建eureka-server服务&#34;&gt;3.2.1.创建eureka-server服务&lt;/h3&gt;
&lt;p&gt;在cloud-demo父工程下，创建一个子模块：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713220605881.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713220605881.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713220605881&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713220605881&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;填写模块信息：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713220857396.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713220857396.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713220857396&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713220857396&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后填写服务信息：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713221339022.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713221339022.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713221339022&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713221339022&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;322引入eureka依赖&#34;&gt;3.2.2.引入eureka依赖&lt;/h3&gt;
&lt;p&gt;引入SpringCloud为eureka提供的starter依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-server&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;323编写启动类&#34;&gt;3.2.3.编写启动类&lt;/h3&gt;
&lt;p&gt;给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.eureka&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.cloud.netflix.eureka.server.EnableEurekaServer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@EnableEurekaServer&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EurekaApplication&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EurekaApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;324编写配置文件&#34;&gt;3.2.4.编写配置文件&lt;/h3&gt;
&lt;p&gt;编写一个application.yml文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10086&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;eureka-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;eureka&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service-url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultZone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http://127.0.0.1:10086/eureka&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;325启动服务&#34;&gt;3.2.5.启动服务&lt;/h3&gt;
&lt;p&gt;启动微服务，然后在浏览器访问：http://127.0.0.1:10086&lt;/p&gt;
&lt;p&gt;看到下面结果应该是成功了：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713222157190.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713222157190.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713222157190&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713222157190&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;33服务注册&#34;&gt;3.3.服务注册&lt;/h2&gt;
&lt;p&gt;下面，我们将user-service注册到eureka-server中去。&lt;/p&gt;
&lt;h3 id=&#34;1引入依赖&#34;&gt;1）引入依赖&lt;/h3&gt;
&lt;p&gt;在user-service的pom文件中，引入下面的eureka-client依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2配置文件&#34;&gt;2）配置文件&lt;/h3&gt;
&lt;p&gt;在user-service中，修改application.yml文件，添加服务名称、eureka地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;userservice&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;eureka&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service-url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultZone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http://127.0.0.1:10086/eureka&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3启动多个user-service实例&#34;&gt;3）启动多个user-service实例&lt;/h3&gt;
&lt;p&gt;为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service。&lt;/p&gt;
&lt;p&gt;首先，复制原来的user-service启动配置：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713222656562.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713222656562.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713222656562&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713222656562&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后，在弹出的窗口中，填写信息：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713222757702.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713222757702.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713222757702&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713222757702&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在，SpringBoot窗口会出现两个user-service启动配置：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713222841951.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713222841951.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713222841951&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713222841951&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不过，第一个是8081端口，第二个是8082端口。&lt;/p&gt;
&lt;p&gt;启动两个user-service实例：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713223041491.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713223041491.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713223041491&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713223041491&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看eureka-server管理页面：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713223150650.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713223150650.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713223150650&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713223150650&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;34服务发现&#34;&gt;3.4.服务发现&lt;/h2&gt;
&lt;p&gt;下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。&lt;/p&gt;
&lt;h3 id=&#34;1引入依赖-1&#34;&gt;1）引入依赖&lt;/h3&gt;
&lt;p&gt;之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致。&lt;/p&gt;
&lt;p&gt;在order-service的pom文件中，引入下面的eureka-client依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2配置文件-1&#34;&gt;2）配置文件&lt;/h3&gt;
&lt;p&gt;服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息：&lt;/p&gt;
&lt;p&gt;在order-service中，修改application.yml文件，添加服务名称、eureka地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;orderservice&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;eureka&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service-url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultZone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http://127.0.0.1:10086/eureka&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3服务拉取和负载均衡&#34;&gt;3）服务拉取和负载均衡&lt;/h3&gt;
&lt;p&gt;最后，我们要去eureka-server中拉取user-service服务的实例列表，并且实现负载均衡。&lt;/p&gt;
&lt;p&gt;不过这些动作不用我们去做，只需要添加一些注解即可。&lt;/p&gt;
&lt;p&gt;在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713224049419.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713224049419.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713224049419&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713224049419&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713224245731.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713224245731.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713224245731&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713224245731&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。&lt;/p&gt;
&lt;h1 id=&#34;4ribbon负载均衡&#34;&gt;4.Ribbon负载均衡&lt;/h1&gt;
&lt;p&gt;上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？&lt;/p&gt;
&lt;h2 id=&#34;41负载均衡原理&#34;&gt;4.1.负载均衡原理&lt;/h2&gt;
&lt;p&gt;SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713224517686.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713224517686.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713224517686&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713224517686&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么我们发出的请求明明是http://userservice/user/1，怎么变成了http://localhost:8081的呢？&lt;/p&gt;
&lt;h2 id=&#34;42源码跟踪&#34;&gt;4.2.源码跟踪&lt;/h2&gt;
&lt;p&gt;为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。&lt;/p&gt;
&lt;p&gt;显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是&lt;code&gt;LoadBalancerInterceptor&lt;/code&gt;，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。&lt;/p&gt;
&lt;p&gt;我们进行源码跟踪：&lt;/p&gt;
&lt;h3 id=&#34;1loadbalancerintercepor&#34;&gt;1）LoadBalancerIntercepor&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525620483637.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525620483637.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;1525620483637&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;1525620483637&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;request.getURI()&lt;/code&gt;：获取请求uri，本例中就是 http://user-service/user/8&lt;/li&gt;
&lt;li&gt;&lt;code&gt;originalUri.getHost()&lt;/code&gt;：获取uri路径的主机名，其实就是服务id，&lt;code&gt;user-service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.loadBalancer.execute()&lt;/code&gt;：处理服务id，和用户请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的&lt;code&gt;this.loadBalancer&lt;/code&gt;是&lt;code&gt;LoadBalancerClient&lt;/code&gt;类型，我们继续跟入。&lt;/p&gt;
&lt;h3 id=&#34;2loadbalancerclient&#34;&gt;2）LoadBalancerClient&lt;/h3&gt;
&lt;p&gt;继续跟入execute方法：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525620787090.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525620787090.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;1525620787090&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;1525620787090&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。&lt;/li&gt;
&lt;li&gt;getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;放行后，再次访问并跟踪，发现获取的是8081：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525620835911.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525620835911.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;1525620835911&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;1525620835911&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;果然实现了负载均衡。&lt;/p&gt;
&lt;h3 id=&#34;3负载均衡策略irule&#34;&gt;3）负载均衡策略IRule&lt;/h3&gt;
&lt;p&gt;在刚才的代码中，可以看到获取服务使通过一个&lt;code&gt;getServer&lt;/code&gt;方法来做负载均衡:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525620835911.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525620835911.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;1525620835911&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;1525620835911&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们继续跟入：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1544361421671.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1544361421671.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;1544361421671&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;1544361421671&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续跟踪源码chooseServer方法，发现这么一段代码：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525622652849.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525622652849.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;1525622652849&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;1525622652849&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们看看这个rule是谁：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525622699666.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525622699666.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;1525622699666&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;1525622699666&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里的rule默认值是一个&lt;code&gt;RoundRobinRule&lt;/code&gt;，看类的介绍：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525622754316.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/1525622754316.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;1525622754316&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;1525622754316&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这不就是轮询的意思嘛。&lt;/p&gt;
&lt;p&gt;到这里，整个负载均衡的流程我们就清楚了。&lt;/p&gt;
&lt;h3 id=&#34;4总结&#34;&gt;4）总结&lt;/h3&gt;
&lt;p&gt;SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713224724673.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713224724673.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713224724673&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713224724673&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;基本流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拦截我们的RestTemplate请求http://userservice/user/1&lt;/li&gt;
&lt;li&gt;RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service&lt;/li&gt;
&lt;li&gt;DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表&lt;/li&gt;
&lt;li&gt;eureka返回列表，localhost:8081、localhost:8082&lt;/li&gt;
&lt;li&gt;IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081&lt;/li&gt;
&lt;li&gt;RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到http://localhost:8081/user/1，发起真实请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;43负载均衡策略&#34;&gt;4.3.负载均衡策略&lt;/h2&gt;
&lt;h3 id=&#34;431负载均衡策略&#34;&gt;4.3.1.负载均衡策略&lt;/h3&gt;
&lt;p&gt;负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713225653000.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713225653000.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713225653000&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713225653000&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不同规则的含义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;内置负载均衡规则类&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;规则描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RoundRobinRule&lt;/td&gt;
&lt;td&gt;简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AvailabilityFilteringRule&lt;/td&gt;
&lt;td&gt;对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的&lt;!-- raw HTML omitted --&gt;.&lt;!-- raw HTML omitted --&gt;.ActiveConnectionsLimit属性进行配置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WeightedResponseTimeRule&lt;/td&gt;
&lt;td&gt;为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ZoneAvoidanceRule&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BestAvailableRule&lt;/td&gt;
&lt;td&gt;忽略那些短路的服务器，并选择并发数较低的服务器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RandomRule&lt;/td&gt;
&lt;td&gt;随机选择一个可用的服务器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RetryRule&lt;/td&gt;
&lt;td&gt;重试机制的选择逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;默认的实现就是ZoneAvoidanceRule，是一种轮询方案&lt;/p&gt;
&lt;h3 id=&#34;432自定义负载均衡策略&#34;&gt;4.3.2.自定义负载均衡策略&lt;/h3&gt;
&lt;p&gt;通过定义IRule实现可以修改负载均衡规则，有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IRule&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;randomRule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RandomRule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;userservice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 给某个微服务配置负载均衡规则，这里是userservice服务&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ribbon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;NFLoadBalancerRuleClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;com.netflix.loadbalancer.RandomRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 负载均衡规则 &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，一般用默认的负载均衡规则，不做修改。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;44饥饿加载&#34;&gt;4.4.饥饿加载&lt;/h2&gt;
&lt;p&gt;Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。&lt;/p&gt;
&lt;p&gt;而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;ribbon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;eager-load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clients&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;userservice&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;5nacos注册中心&#34;&gt;5.Nacos注册中心&lt;/h1&gt;
&lt;p&gt;国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。&lt;/p&gt;
&lt;h2 id=&#34;51认识和安装nacos&#34;&gt;5.1.认识和安装Nacos&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://nacos.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nacos&lt;/a&gt;是阿里巴巴的产品，现在是&lt;a class=&#34;link&#34; href=&#34;https://spring.io/projects/spring-cloud&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringCloud&lt;/a&gt;中的一个组件。相比&lt;a class=&#34;link&#34; href=&#34;https://github.com/Netflix/eureka&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Eureka&lt;/a&gt;功能更加丰富，在国内受欢迎程度较高。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713230444308.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713230444308.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713230444308&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713230444308&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装方式可以参考课前资料 &lt;a class=&#34;link&#34; href=&#34;https://lzh54080452.github.io/p/docker%e9%83%a8%e7%bd%b2%e5%8d%95%e6%9c%banacos%e5%92%8c%e9%9b%86%e7%be%a4nacos/&#34; &gt;Docker部署单机Nacos和集群Nacos &lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;52服务注册到nacos&#34;&gt;5.2.服务注册到nacos&lt;/h2&gt;
&lt;p&gt;Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。&lt;/p&gt;
&lt;p&gt;主要差异在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖不同&lt;/li&gt;
&lt;li&gt;服务地址不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1引入依赖-2&#34;&gt;1）引入依赖&lt;/h3&gt;
&lt;p&gt;在cloud-demo父工程的pom文件中的&lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt;中引入SpringCloudAlibaba的依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-alibaba-dependencies&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.6.RELEASE&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span class=&#34;nt&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：不要忘了注释掉eureka的依赖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2配置nacos地址&#34;&gt;2）配置nacos地址&lt;/h3&gt;
&lt;p&gt;在user-service和order-service的application.yml中添加nacos地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server-addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;localhost:8848&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：不要忘了注释掉eureka的地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3重启&#34;&gt;3）重启&lt;/h3&gt;
&lt;p&gt;重启微服务后，登录nacos管理页面，可以看到微服务信息：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713231439607.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713231439607.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713231439607&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713231439607&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;53服务分级存储模型&#34;&gt;5.3.服务分级存储模型&lt;/h2&gt;
&lt;p&gt;一个&lt;strong&gt;服务&lt;/strong&gt;可以有多个&lt;strong&gt;实例&lt;/strong&gt;，例如我们的user-service，可以有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;127.0.0.1:8081&lt;/li&gt;
&lt;li&gt;127.0.0.1:8082&lt;/li&gt;
&lt;li&gt;127.0.0.1:8083&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假如这些实例分布于全国各地的不同机房，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;127.0.0.1:8081，在上海机房&lt;/li&gt;
&lt;li&gt;127.0.0.1:8082，在上海机房&lt;/li&gt;
&lt;li&gt;127.0.0.1:8083，在杭州机房&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nacos就将同一机房内的实例 划分为一个&lt;strong&gt;集群&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713232522531.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713232522531.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713232522531&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713232522531&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713232658928.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713232658928.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713232658928&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713232658928&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;杭州机房内的order-service应该优先访问同机房的user-service。&lt;/p&gt;
&lt;h3 id=&#34;531给user-service配置集群&#34;&gt;5.3.1.给user-service配置集群&lt;/h3&gt;
&lt;p&gt;修改user-service的application.yml文件，添加集群配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server-addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;localhost:8848&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;discovery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HZ&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 集群名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启两个user-service实例后，我们可以在nacos控制台看到下面结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713232916215.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713232916215.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713232916215&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713232916215&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们再次复制一个user-service启动配置，添加属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;-Dserver.port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8083&lt;/span&gt; -Dspring.cloud.nacos.discovery.cluster-name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;SH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置如图所示：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713233528982.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713233528982.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713233528982&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713233528982&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动UserApplication3后再次查看nacos控制台：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713233727923.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713233727923.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713233727923&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713233727923&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;532同集群优先的负载均衡&#34;&gt;5.3.2.同集群优先的负载均衡&lt;/h3&gt;
&lt;p&gt;默认的&lt;code&gt;ZoneAvoidanceRule&lt;/code&gt;并不能实现根据同集群优先来实现负载均衡。&lt;/p&gt;
&lt;p&gt;因此Nacos中提供了一个&lt;code&gt;NacosRule&lt;/code&gt;的实现，可以优先从同集群中挑选实例。&lt;/p&gt;
&lt;p&gt;1）给order-service配置集群信息&lt;/p&gt;
&lt;p&gt;修改order-service的application.yml文件，添加集群配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;spring:
  cloud:
    nacos:
      server-addr: localhost:8848
      discovery:
        cluster-name: HZ &lt;span class=&#34;c1&#34;&gt;# 集群名称&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）修改负载均衡规则&lt;/p&gt;
&lt;p&gt;修改order-service的application.yml文件，修改负载均衡规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;userservice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ribbon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;NFLoadBalancerRuleClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;com.alibaba.cloud.nacos.ribbon.NacosRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 负载均衡规则 &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;54权重配置&#34;&gt;5.4.权重配置&lt;/h2&gt;
&lt;p&gt;实际部署中会出现这样的场景：&lt;/p&gt;
&lt;p&gt;服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。&lt;/p&gt;
&lt;p&gt;但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。&lt;/p&gt;
&lt;p&gt;因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。&lt;/p&gt;
&lt;p&gt;在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713235133225.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713235133225.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713235133225&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713235133225&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在弹出的编辑窗口，修改权重：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713235235219.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210713235235219.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210713235235219&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210713235235219&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果权重修改为0，则该实例永远不会被访问&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;55环境隔离&#34;&gt;5.5.环境隔离&lt;/h2&gt;
&lt;p&gt;Nacos提供了namespace来实现环境隔离功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nacos中可以有多个namespace&lt;/li&gt;
&lt;li&gt;namespace下可以有group、service等&lt;/li&gt;
&lt;li&gt;不同namespace之间相互隔离，例如不同namespace的服务互相不可见&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000101516.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000101516.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714000101516&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714000101516&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;551创建namespace&#34;&gt;5.5.1.创建namespace&lt;/h3&gt;
&lt;p&gt;默认情况下，所有service、data、group都在同一个namespace，名为public：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000414781.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000414781.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714000414781&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714000414781&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以点击页面新增按钮，添加一个namespace：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000440143.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000440143.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714000440143&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714000440143&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后，填写表单：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000505928.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000505928.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714000505928&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714000505928&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就能在页面看到一个新的namespace：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000522913.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000522913.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714000522913&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714000522913&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;552给微服务配置namespace&#34;&gt;5.5.2.给微服务配置namespace&lt;/h3&gt;
&lt;p&gt;给微服务配置namespace只能通过修改配置来实现。&lt;/p&gt;
&lt;p&gt;例如，修改order-service的application.yml文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server-addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;localhost:8848&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;discovery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HZ&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;492a7d5d-237b-46a1-a99a-fa8e98e4b0f9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 命名空间，填ID&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启order-service后，访问控制台，可以看到下面的结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000830703.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000830703.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714000830703&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714000830703&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000837140.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000837140.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714000837140&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714000837140&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000941256.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714000941256.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714000941256&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714000941256&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;56nacos与eureka的区别&#34;&gt;5.6.Nacos与Eureka的区别&lt;/h2&gt;
&lt;p&gt;Nacos的服务实例分为两种l类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置一个服务实例为永久实例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;discovery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ephemeral&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 设置为非临时实例&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714001728017.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714001728017.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714001728017&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714001728017&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nacos与eureka的共同点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都支持服务注册和服务拉取&lt;/li&gt;
&lt;li&gt;都支持服务提供者心跳方式做健康检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nacos与Eureka的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式&lt;/li&gt;
&lt;li&gt;临时实例心跳不正常会被剔除，非临时实例则不会被剔除&lt;/li&gt;
&lt;li&gt;Nacos支持服务列表变更的消息推送模式，服务列表更新更及时&lt;/li&gt;
&lt;li&gt;Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1nacos配置管理&#34;&gt;1.Nacos配置管理&lt;/h1&gt;
&lt;p&gt;Nacos除了可以做注册中心，同样可以做配置管理来使用。&lt;/p&gt;
&lt;h2 id=&#34;11统一配置管理&#34;&gt;1.1.统一配置管理&lt;/h2&gt;
&lt;p&gt;当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714164426792.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714164426792.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714164426792&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714164426792&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。&lt;/p&gt;
&lt;h3 id=&#34;111在nacos中添加配置文件&#34;&gt;1.1.1.在nacos中添加配置文件&lt;/h3&gt;
&lt;p&gt;如何在nacos中管理配置呢？&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714164742924.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714164742924.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714164742924&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714164742924&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在弹出的表单中，填写配置信息：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714164856664.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714164856664.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714164856664&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714164856664&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;112从微服务拉取配置&#34;&gt;1.1.2.从微服务拉取配置&lt;/h3&gt;
&lt;p&gt;微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动。&lt;/p&gt;
&lt;p&gt;但如果尚未读取application.yml，又如何得知nacos地址呢？&lt;/p&gt;
&lt;p&gt;因此spring引入了一种新的配置文件：bootstrap.yaml文件，会在application.yml之前被读取，流程如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/L0iFYNF.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/L0iFYNF.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;img&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;img&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;1）引入nacos-config依赖&lt;/p&gt;
&lt;p&gt;首先，在user-service服务中，引入nacos-config的客户端依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!--nacos配置管理依赖--&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-config&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）添加bootstrap.yaml&lt;/p&gt;
&lt;p&gt;然后，在user-service中添加一个bootstrap.yaml文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;userservice&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 服务名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;profiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;active&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#开发环境，这里是dev &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server-addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;localhost:8848&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Nacos地址&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;file-extension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 文件后缀名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}&lt;/code&gt;作为文件id，来读取配置。&lt;/p&gt;
&lt;p&gt;本例中，就是去读取&lt;code&gt;userservice-dev.yaml&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714170845901.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714170845901.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714170845901&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714170845901&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3）读取nacos配置&lt;/p&gt;
&lt;p&gt;在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714170337448.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714170337448.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714170337448&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714170337448&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完整代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.user.web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.user.pojo.User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.user.service.UserService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;lombok.extern.slf4j.Slf4j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.*&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.time.LocalDateTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.time.format.DateTimeFormatter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@RestController&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/user&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserController&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserService&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${pattern.dateformat}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dateformat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    
    &lt;span class=&#34;nd&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;now&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ofPattern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dateformat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ...略
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在页面访问，可以看到效果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714170449612.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714170449612.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714170449612&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714170449612&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;12配置热更新&#34;&gt;1.2.配置热更新&lt;/h2&gt;
&lt;p&gt;我们最终的目的，是修改nacos中的配置后，微服务中无需重启即可让配置生效，也就是&lt;strong&gt;配置热更新&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要实现配置热更新，可以使用两种方式：&lt;/p&gt;
&lt;h3 id=&#34;121方式一&#34;&gt;1.2.1.方式一&lt;/h3&gt;
&lt;p&gt;在@Value注入的变量所在类上添加注解@RefreshScope：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714171036335.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714171036335.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714171036335&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714171036335&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;122方式二&#34;&gt;1.2.2.方式二&lt;/h3&gt;
&lt;p&gt;使用@ConfigurationProperties注解代替@Value注解。&lt;/p&gt;
&lt;p&gt;在user-service服务中，添加一个类，读取patterrn.dateformat属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.user.config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;lombok.Data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.context.properties.ConfigurationProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@Data&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pattern&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PatternProperties&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dateformat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在UserController中使用这个类代替@Value：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714171316124.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714171316124.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714171316124&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714171316124&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完整代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.user.web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.user.config.PatternProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.user.pojo.User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.user.service.UserService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;lombok.extern.slf4j.Slf4j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.PathVariable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.time.LocalDateTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.time.format.DateTimeFormatter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@RestController&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/user&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserController&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserService&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PatternProperties&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;patternProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;now&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ofPattern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;patternProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDateformat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 略
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;13配置共享&#34;&gt;1.3.配置共享&lt;/h2&gt;
&lt;p&gt;其实微服务启动时，会去nacos读取多个配置文件，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[spring.application.name]-[spring.profiles.active].yaml&lt;/code&gt;，例如：userservice-dev.yaml&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[spring.application.name].yaml&lt;/code&gt;，例如：userservice.yaml&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而&lt;code&gt;[spring.application.name].yaml&lt;/code&gt;不包含环境，因此可以被多个环境共享。&lt;/p&gt;
&lt;p&gt;下面我们通过案例来测试配置共享&lt;/p&gt;
&lt;h3 id=&#34;1添加一个环境共享配置&#34;&gt;1）添加一个环境共享配置&lt;/h3&gt;
&lt;p&gt;我们在nacos中添加一个userservice.yaml文件：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714173233650.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714173233650.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714173233650&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714173233650&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2在user-service中读取共享配置&#34;&gt;2）在user-service中读取共享配置&lt;/h3&gt;
&lt;p&gt;在user-service服务中，修改PatternProperties类，读取新添加的属性：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714173324231.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714173324231.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714173324231&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714173324231&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在user-service服务中，修改UserController，添加一个方法：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714173721309.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714173721309.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714173721309&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714173721309&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3运行两个userapplication使用不同的profile&#34;&gt;3）运行两个UserApplication，使用不同的profile&lt;/h3&gt;
&lt;p&gt;修改UserApplication2这个启动项，改变其profile值：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714173538538.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714173538538.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714173538538&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714173538538&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714173519963.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714173519963.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714173519963&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714173519963&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样，UserApplication(8081)使用的profile是dev，UserApplication2(8082)使用的profile是test。&lt;/p&gt;
&lt;p&gt;启动UserApplication和UserApplication2&lt;/p&gt;
&lt;p&gt;访问http://localhost:8081/user/prop，结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174313344.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174313344.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714174313344&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714174313344&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;访问http://localhost:8082/user/prop，结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174424818.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174424818.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714174424818&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714174424818&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，不管是dev，还是test环境，都读取到了envSharedValue这个属性的值。&lt;/p&gt;
&lt;h3 id=&#34;4配置共享的优先级&#34;&gt;4）配置共享的优先级&lt;/h3&gt;
&lt;p&gt;当nacos、服务本地同时出现相同属性时，优先级有高低之分：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174623557.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174623557.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714174623557&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714174623557&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;14搭建nacos集群&#34;&gt;1.4.搭建Nacos集群&lt;/h2&gt;
&lt;p&gt;Nacos生产环境下一定要部署为集群状态，部署方式参考课前资料中的文档：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174728042.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174728042.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714174728042&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714174728042&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;2feign远程调用&#34;&gt;2.Feign远程调用&lt;/h1&gt;
&lt;p&gt;先来看我们以前利用RestTemplate发起远程调用的代码：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174814204.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174814204.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714174814204&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714174814204&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;存在下面的问题：&lt;/p&gt;
&lt;p&gt;•代码可读性差，编程体验不统一&lt;/p&gt;
&lt;p&gt;•参数复杂URL难以维护&lt;/p&gt;
&lt;p&gt;Feign是一个声明式的http客户端，官方地址：https://github.com/OpenFeign/feign&lt;/p&gt;
&lt;p&gt;其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174918088.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714174918088.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714174918088&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714174918088&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;21feign替代resttemplate&#34;&gt;2.1.Feign替代RestTemplate&lt;/h2&gt;
&lt;p&gt;Fegin的使用步骤如下：&lt;/p&gt;
&lt;h3 id=&#34;1引入依赖-3&#34;&gt;1）引入依赖&lt;/h3&gt;
&lt;p&gt;我们在order-service服务的pom文件中引入feign的依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2添加注解&#34;&gt;2）添加注解&lt;/h3&gt;
&lt;p&gt;在order-service的启动类添加注解开启Feign的功能：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714175102524.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714175102524.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714175102524&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714175102524&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3编写feign的客户端&#34;&gt;3）编写Feign的客户端&lt;/h3&gt;
&lt;p&gt;在order-service中新建一个接口，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.order.client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.order.pojo.User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.cloud.openfeign.FeignClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.PathVariable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@FeignClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;userservice&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserClient&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/user/{id}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findById&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@PathVariable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务名称：userservice&lt;/li&gt;
&lt;li&gt;请求方式：GET&lt;/li&gt;
&lt;li&gt;请求路径：/user/{id}&lt;/li&gt;
&lt;li&gt;请求参数：Long id&lt;/li&gt;
&lt;li&gt;返回值类型：User&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。&lt;/p&gt;
&lt;h3 id=&#34;4测试&#34;&gt;4）测试&lt;/h3&gt;
&lt;p&gt;修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714175415087.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714175415087.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714175415087&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714175415087&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;是不是看起来优雅多了。&lt;/p&gt;
&lt;h3 id=&#34;5总结&#34;&gt;5）总结&lt;/h3&gt;
&lt;p&gt;使用Feign的步骤：&lt;/p&gt;
&lt;p&gt;① 引入依赖&lt;/p&gt;
&lt;p&gt;② 添加@EnableFeignClients注解&lt;/p&gt;
&lt;p&gt;③ 编写FeignClient接口&lt;/p&gt;
&lt;p&gt;④ 使用FeignClient中定义的方法代替RestTemplate&lt;/p&gt;
&lt;h2 id=&#34;22自定义配置&#34;&gt;2.2.自定义配置&lt;/h2&gt;
&lt;p&gt;Feign可以支持很多的自定义配置，如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;feign.Logger.Level&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;修改日志级别&lt;/td&gt;
&lt;td&gt;包含四种不同的级别：NONE、BASIC、HEADERS、FULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feign.codec.Decoder&lt;/td&gt;
&lt;td&gt;响应结果的解析器&lt;/td&gt;
&lt;td&gt;http远程调用的结果做解析，例如解析json字符串为java对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feign.codec.Encoder&lt;/td&gt;
&lt;td&gt;请求参数编码&lt;/td&gt;
&lt;td&gt;将请求参数编码，便于通过http请求发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feign. Contract&lt;/td&gt;
&lt;td&gt;支持的注解格式&lt;/td&gt;
&lt;td&gt;默认是SpringMVC的注解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feign. Retryer&lt;/td&gt;
&lt;td&gt;失败重试机制&lt;/td&gt;
&lt;td&gt;请求失败的重试机制，默认是没有，不过会使用Ribbon的重试&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。&lt;/p&gt;
&lt;p&gt;下面以日志为例来演示如何自定义配置。&lt;/p&gt;
&lt;h3 id=&#34;221配置文件方式&#34;&gt;2.2.1.配置文件方式&lt;/h3&gt;
&lt;p&gt;基于配置文件修改feign的日志级别可以针对单个服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;feign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;userservice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 针对某个微服务的配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;loggerLevel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;FULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#  日志级别 &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以针对所有服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;feign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;loggerLevel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;FULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#  日志级别 &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而日志的级别分为四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NONE：不记录任何日志信息，这是默认值。&lt;/li&gt;
&lt;li&gt;BASIC：仅记录请求的方法，URL以及响应状态码和执行时间&lt;/li&gt;
&lt;li&gt;HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息&lt;/li&gt;
&lt;li&gt;FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;222java代码方式&#34;&gt;2.2.2.Java代码方式&lt;/h3&gt;
&lt;p&gt;也可以基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DefaultFeignConfiguration&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Logger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Level&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;feignLogLevel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Logger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Level&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;BASIC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 日志级别为BASIC
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要&lt;strong&gt;全局生效&lt;/strong&gt;，将其放到启动类的@EnableFeignClients这个注解中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@EnableFeignClients&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defaultConfiguration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DefaultFeignConfiguration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果是&lt;strong&gt;局部生效&lt;/strong&gt;，则把它放到对应的@FeignClient这个注解中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@FeignClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;userservice&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;configuration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DefaultFeignConfiguration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;23feign使用优化&#34;&gt;2.3.Feign使用优化&lt;/h2&gt;
&lt;p&gt;Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：&lt;/p&gt;
&lt;p&gt;•URLConnection：默认实现，不支持连接池&lt;/p&gt;
&lt;p&gt;•Apache HttpClient ：支持连接池&lt;/p&gt;
&lt;p&gt;•OKHttp：支持连接池&lt;/p&gt;
&lt;p&gt;因此提高Feign的性能主要手段就是使用&lt;strong&gt;连接池&lt;/strong&gt;代替默认的URLConnection。&lt;/p&gt;
&lt;p&gt;这里我们用Apache的HttpClient来演示。&lt;/p&gt;
&lt;p&gt;1）引入依赖&lt;/p&gt;
&lt;p&gt;在order-service的pom文件中引入Apache的HttpClient依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!--httpClient的依赖 --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.github.openfeign&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-httpclient&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）配置连接池&lt;/p&gt;
&lt;p&gt;在order-service的application.yml中添加配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;feign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# default全局的配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;loggerLevel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;BASIC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 日志级别，BASIC就是基本的请求和响应信息&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpclient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 开启feign对HttpClient的支持&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max-connections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 最大的连接数&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max-connections-per-route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 每个路径的最大连接数&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，在FeignClientFactoryBean中的loadBalance方法中打断点：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714185925910.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714185925910.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714185925910&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714185925910&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Debug方式启动order-service服务，可以看到这里的client，底层就是Apache HttpClient：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714190041542.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714190041542.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714190041542&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714190041542&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;总结，Feign的优化：&lt;/p&gt;
&lt;p&gt;1.日志级别尽量用basic&lt;/p&gt;
&lt;p&gt;2.使用HttpClient或OKHttp代替URLConnection&lt;/p&gt;
&lt;p&gt;①  引入feign-httpClient依赖&lt;/p&gt;
&lt;p&gt;②  配置文件开启httpClient功能，设置连接池参数&lt;/p&gt;
&lt;h2 id=&#34;24最佳实践&#34;&gt;2.4.最佳实践&lt;/h2&gt;
&lt;p&gt;所谓最近实践，就是使用过程中总结的经验，最好的一种使用方式。&lt;/p&gt;
&lt;p&gt;自习观察可以发现，Feign的客户端与服务提供者的controller代码非常相似：&lt;/p&gt;
&lt;p&gt;feign客户端：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714190542730.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714190542730.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714190542730&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714190542730&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;UserController：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714190528450.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714190528450.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714190528450&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714190528450&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有没有一种办法简化这种重复的代码编写呢？&lt;/p&gt;
&lt;h3 id=&#34;241继承方式&#34;&gt;2.4.1.继承方式&lt;/h3&gt;
&lt;p&gt;一样的代码可以通过继承来共享：&lt;/p&gt;
&lt;p&gt;1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。&lt;/p&gt;
&lt;p&gt;2）Feign客户端和Controller都集成改接口&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714190640857.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714190640857.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714190640857&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714190640857&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单&lt;/li&gt;
&lt;li&gt;实现了代码共享&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务提供方、服务消费方紧耦合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;242抽取方式&#34;&gt;2.4.2.抽取方式&lt;/h3&gt;
&lt;p&gt;将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。&lt;/p&gt;
&lt;p&gt;例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714214041796.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714214041796.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714214041796&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714214041796&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;243实现基于抽取的最佳实践&#34;&gt;2.4.3.实现基于抽取的最佳实践&lt;/h3&gt;
&lt;h4 id=&#34;1抽取&#34;&gt;1）抽取&lt;/h4&gt;
&lt;p&gt;首先创建一个module，命名为feign-api：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714204557771.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714204557771.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714204557771&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714204557771&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;项目结构：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714204656214.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714204656214.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714204656214&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714204656214&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在feign-api中然后引入feign的starter依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714205221970.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714205221970.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714205221970&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714205221970&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;2在order-service中使用feign-api&#34;&gt;2）在order-service中使用feign-api&lt;/h4&gt;
&lt;p&gt;首先，删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口。&lt;/p&gt;
&lt;p&gt;在order-service的pom文件中中引入feign-api的依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;cn.itcast.demo&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-api&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包&lt;/p&gt;
&lt;h4 id=&#34;3重启测试&#34;&gt;3）重启测试&lt;/h4&gt;
&lt;p&gt;重启后，发现服务报错了：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714205623048.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714205623048.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714205623048&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714205623048&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是因为UserClient现在在cn.itcast.feign.clients包下，&lt;/p&gt;
&lt;p&gt;而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient。&lt;/p&gt;
&lt;h4 id=&#34;4解决扫描包问题&#34;&gt;4）解决扫描包问题&lt;/h4&gt;
&lt;p&gt;方式一：&lt;/p&gt;
&lt;p&gt;指定Feign应该扫描的包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@EnableFeignClients&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;basePackages&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;cn.itcast.feign.clients&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方式二：&lt;/p&gt;
&lt;p&gt;指定需要加载的Client接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@EnableFeignClients&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clients&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3gateway服务网关&#34;&gt;3.Gateway服务网关&lt;/h1&gt;
&lt;p&gt;Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。&lt;/p&gt;
&lt;h2 id=&#34;31为什么需要网关&#34;&gt;3.1.为什么需要网关&lt;/h2&gt;
&lt;p&gt;Gateway网关是我们服务的守门神，所有微服务的统一入口。&lt;/p&gt;
&lt;p&gt;网关的&lt;strong&gt;核心功能特性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求路由&lt;/li&gt;
&lt;li&gt;权限控制&lt;/li&gt;
&lt;li&gt;限流&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;架构图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714210131152.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714210131152.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714210131152&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714210131152&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;权限控制&lt;/strong&gt;：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路由和负载均衡&lt;/strong&gt;：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限流&lt;/strong&gt;：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。&lt;/p&gt;
&lt;p&gt;在SpringCloud中网关的实现包括两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gateway&lt;/li&gt;
&lt;li&gt;zuul&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。&lt;/p&gt;
&lt;h2 id=&#34;32gateway快速入门&#34;&gt;3.2.gateway快速入门&lt;/h2&gt;
&lt;p&gt;下面，我们就演示下网关的基本路由功能。基本步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建SpringBoot工程gateway，引入网关依赖&lt;/li&gt;
&lt;li&gt;编写启动类&lt;/li&gt;
&lt;li&gt;编写基础配置和路由规则&lt;/li&gt;
&lt;li&gt;启动网关服务进行测试&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1创建gateway服务引入依赖&#34;&gt;1）创建gateway服务，引入依赖&lt;/h3&gt;
&lt;p&gt;创建服务：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714210919458.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714210919458.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714210919458&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714210919458&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;引入依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!--网关--&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-gateway&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;&amp;lt;!--nacos服务发现依赖--&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2编写启动类&#34;&gt;2）编写启动类&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.gateway&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;GatewayApplication&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GatewayApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3编写基础配置和路由规则&#34;&gt;3）编写基础配置和路由规则&lt;/h3&gt;
&lt;p&gt;创建application.yml文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 网关端口&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 服务名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server-addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;localhost:8848&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# nacos地址&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 网关路由配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 路由id，自定义，只要唯一即可&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;lb://userservice&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 路由的目标地址 lb就是负载均衡，后面跟服务名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;predicates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 路由断言，也就是判断请求是否符合路由规则的条件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Path=/user/**&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这个是按照路径匹配，只要以/user/开头就符合要求&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们将符合&lt;code&gt;Path&lt;/code&gt; 规则的一切请求，都代理到 &lt;code&gt;uri&lt;/code&gt;参数指定的地址。&lt;/p&gt;
&lt;p&gt;本例中，我们将 &lt;code&gt;/user/**&lt;/code&gt;开头的请求，代理到&lt;code&gt;lb://userservice&lt;/code&gt;，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。&lt;/p&gt;
&lt;h3 id=&#34;4重启测试&#34;&gt;4）重启测试&lt;/h3&gt;
&lt;p&gt;重启网关，访问http://localhost:10010/user/1时，符合&lt;code&gt;/user/**&lt;/code&gt;规则，请求转发到uri：http://userservice/user/1，得到了结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714211908341.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714211908341.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714211908341&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714211908341&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;5网关路由的流程图&#34;&gt;5）网关路由的流程图&lt;/h3&gt;
&lt;p&gt;整个访问的流程如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714211742956.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714211742956.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714211742956&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714211742956&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;网关搭建步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建项目，引入nacos服务发现和gateway依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置application.yml，包括服务基本信息、nacos地址、路由&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;路由配置包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;路由id：路由的唯一标示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;路由断言（predicates）：判断路由的规则，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;路由过滤器（filters）：对请求或响应做处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来，就重点来学习路由断言和路由过滤器的详细知识&lt;/p&gt;
&lt;h2 id=&#34;33断言工厂&#34;&gt;3.3.断言工厂&lt;/h2&gt;
&lt;p&gt;我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件&lt;/p&gt;
&lt;p&gt;例如Path=/user/**是按照路径匹配，这个规则是由&lt;/p&gt;
&lt;p&gt;&lt;code&gt;org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory&lt;/code&gt;类来&lt;/p&gt;
&lt;p&gt;处理的，像这样的断言工厂在SpringCloudGateway还有十几个:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;After&lt;/td&gt;
&lt;td&gt;是某个时间点后的请求&lt;/td&gt;
&lt;td&gt;-  After=2037-01-20T17:42:47.789-07:00[America/Denver]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Before&lt;/td&gt;
&lt;td&gt;是某个时间点之前的请求&lt;/td&gt;
&lt;td&gt;-  Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Between&lt;/td&gt;
&lt;td&gt;是某两个时间点之前的请求&lt;/td&gt;
&lt;td&gt;-  Between=2037-01-20T17:42:47.789-07:00[America/Denver],  2037-01-21T17:42:47.789-07:00[America/Denver]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cookie&lt;/td&gt;
&lt;td&gt;请求必须包含某些cookie&lt;/td&gt;
&lt;td&gt;- Cookie=chocolate, ch.p&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Header&lt;/td&gt;
&lt;td&gt;请求必须包含某些header&lt;/td&gt;
&lt;td&gt;- Header=X-Request-Id, \d+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;请求必须是访问某个host（域名）&lt;/td&gt;
&lt;td&gt;-  Host=&lt;strong&gt;.somehost.org,&lt;/strong&gt;.anotherhost.org&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;请求方式必须是指定方式&lt;/td&gt;
&lt;td&gt;- Method=GET,POST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;请求路径必须符合指定规则&lt;/td&gt;
&lt;td&gt;- Path=/red/{segment},/blue/**&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Query&lt;/td&gt;
&lt;td&gt;请求参数必须包含指定参数&lt;/td&gt;
&lt;td&gt;- Query=name, Jack或者-  Query=name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RemoteAddr&lt;/td&gt;
&lt;td&gt;请求者的ip必须是指定范围&lt;/td&gt;
&lt;td&gt;- RemoteAddr=192.168.1.1/24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Weight&lt;/td&gt;
&lt;td&gt;权重处理&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们只需要掌握Path这种路由工程就可以了。&lt;/p&gt;
&lt;h2 id=&#34;34过滤器工厂&#34;&gt;3.4.过滤器工厂&lt;/h2&gt;
&lt;p&gt;GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714212312871.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714212312871.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714212312871&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714212312871&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;341路由过滤器的种类&#34;&gt;3.4.1.路由过滤器的种类&lt;/h3&gt;
&lt;p&gt;Spring提供了31种不同的路由过滤器工厂。例如：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AddRequestHeader&lt;/td&gt;
&lt;td&gt;给当前请求添加一个请求头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RemoveRequestHeader&lt;/td&gt;
&lt;td&gt;移除请求中的一个请求头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AddResponseHeader&lt;/td&gt;
&lt;td&gt;给响应结果中添加一个响应头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RemoveResponseHeader&lt;/td&gt;
&lt;td&gt;从响应结果中移除有一个响应头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RequestRateLimiter&lt;/td&gt;
&lt;td&gt;限制请求的流量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;342请求头过滤器&#34;&gt;3.4.2.请求头过滤器&lt;/h3&gt;
&lt;p&gt;下面我们以AddRequestHeader 为例来讲解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：给所有进入userservice的请求添加一个请求头：Truth=itcast is freaking awesome!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只需要修改gateway服务的application.yml文件，添加路由过滤即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user-service &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;lb://userservice &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;predicates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Path=/user/** &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 过滤器&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;AddRequestHeader=Truth, Itcast is freaking awesome!&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 添加请求头&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。&lt;/p&gt;
&lt;h3 id=&#34;343默认过滤器&#34;&gt;3.4.3.默认过滤器&lt;/h3&gt;
&lt;p&gt;如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user-service &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;lb://userservice &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;predicates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Path=/user/**&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;default-filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 默认过滤项&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;AddRequestHeader=Truth, Itcast is freaking awesome! &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;344总结&#34;&gt;3.4.4.总结&lt;/h3&gt;
&lt;p&gt;过滤器的作用是什么？&lt;/p&gt;
&lt;p&gt;① 对路由的请求或响应做加工处理，比如添加请求头&lt;/p&gt;
&lt;p&gt;② 配置在路由下的过滤器只对当前路由的请求生效&lt;/p&gt;
&lt;p&gt;defaultFilters的作用是什么？&lt;/p&gt;
&lt;p&gt;① 对所有路由都生效的过滤器&lt;/p&gt;
&lt;h2 id=&#34;35全局过滤器&#34;&gt;3.5.全局过滤器&lt;/h2&gt;
&lt;p&gt;上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。&lt;/p&gt;
&lt;h3 id=&#34;351全局过滤器作用&#34;&gt;3.5.1.全局过滤器作用&lt;/h3&gt;
&lt;p&gt;全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。&lt;/p&gt;
&lt;p&gt;定义方式是实现GlobalFilter接口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;GlobalFilter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *  处理当前请求，有必要的话通过{@link GatewayFilterChain}将请求交给下一个过滤器处理
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param exchange 请求上下文，里面可以获取Request、Response等信息
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param chain 用来把请求委托给下一个过滤器 
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @return {@code Mono&amp;lt;Void&amp;gt;} 返回标示当前过滤器业务结束
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Mono&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerWebExchange&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GatewayFilterChain&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在filter中编写自定义逻辑，可以实现下列功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录状态判断&lt;/li&gt;
&lt;li&gt;权限校验&lt;/li&gt;
&lt;li&gt;请求限流等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;352自定义全局过滤器&#34;&gt;3.5.2.自定义全局过滤器&lt;/h3&gt;
&lt;p&gt;需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;参数中是否有authorization，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;authorization参数值是否为admin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果同时满足则放行，否则拦截&lt;/p&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;p&gt;在gateway中定义一个过滤器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.itcast.gateway.filters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.cloud.gateway.filter.GatewayFilterChain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.cloud.gateway.filter.GlobalFilter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.core.annotation.Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.http.HttpStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.server.ServerWebExchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;reactor.core.publisher.Mono&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AuthorizeFilter&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GlobalFilter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mono&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerWebExchange&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GatewayFilterChain&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 1.获取请求参数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;MultiValueMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getQueryParams&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 2.获取authorization参数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;auth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFirst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;authorization&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 3.校验
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// 放行
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 4.拦截
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// 4.1.禁止访问，设置状态码
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getResponse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setStatusCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;FORBIDDEN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 4.2.结束处理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getResponse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setComplete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;353过滤器执行顺序&#34;&gt;3.5.3.过滤器执行顺序&lt;/h3&gt;
&lt;p&gt;请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter&lt;/p&gt;
&lt;p&gt;请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714214228409.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714214228409.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714214228409&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714214228409&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;排序的规则是什么呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一个过滤器都必须指定一个int类型的order值，&lt;strong&gt;order值越小，优先级越高，执行顺序越靠前&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定&lt;/li&gt;
&lt;li&gt;路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。&lt;/li&gt;
&lt;li&gt;当过滤器的order值一样时，会按照 defaultFilter &amp;gt; 路由过滤器 &amp;gt; GlobalFilter的顺序执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细内容，可以查看源码：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()&lt;/code&gt;方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()&lt;/code&gt;方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链&lt;/p&gt;
&lt;h2 id=&#34;36跨域问题&#34;&gt;3.6.跨域问题&lt;/h2&gt;
&lt;h3 id=&#34;361什么是跨域问题&#34;&gt;3.6.1.什么是跨域问题&lt;/h3&gt;
&lt;p&gt;跨域：域名不一致就是跨域，主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;域名不同： &lt;a class=&#34;link&#34; href=&#34;http://www.taobao.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.taobao.com&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;http://www.taobao.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.taobao.org&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;http://www.jd.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.jd.com&lt;/a&gt; 和 miaosha.jd.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;域名相同，端口不同：localhost:8080和localhost8081&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题&lt;/p&gt;
&lt;p&gt;解决方案：CORS，这个以前应该学习过，这里不再赘述了。不知道的小伙伴可以查看https://www.ruanyifeng.com/blog/2016/04/cors.html&lt;/p&gt;
&lt;h3 id=&#34;362模拟跨域问题&#34;&gt;3.6.2.模拟跨域问题&lt;/h3&gt;
&lt;p&gt;找到课前资料的页面文件：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714215713563.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714215713563.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714215713563&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714215713563&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;放入tomcat或者nginx这样的web服务器中，启动并访问。&lt;/p&gt;
&lt;p&gt;可以在浏览器控制台看到下面的错误：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714215832675.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/SpringCloud_introduce/image-20210714215832675.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210714215832675&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210714215832675&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。&lt;/p&gt;
&lt;h3 id=&#34;363解决跨域问题&#34;&gt;3.6.3.解决跨域问题&lt;/h3&gt;
&lt;p&gt;在gateway服务的application.yml文件中，添加下面的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 。。。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;globalcors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 全局的跨域处理&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;add-to-simple-url-handler-mapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 解决options请求被拦截问题&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;corsConfigurations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;[/**]&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedOrigins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 允许哪些网站的跨域请求 &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8090&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedMethods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 允许的跨域ajax的请求方式&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;PUT&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;OPTIONS&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 允许在请求中携带的头信息&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowCredentials&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 是否允许携带cookie&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxAge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;360000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这次跨域检测的有效期&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Docker部署单机Nacos和集群Nacos</title>
        <link>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BAnacos%E5%92%8C%E9%9B%86%E7%BE%A4nacos/</link>
        <pubDate>Tue, 21 Dec 2021 21:38:58 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BAnacos%E5%92%8C%E9%9B%86%E7%BE%A4nacos/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/nacos_docker.png" alt="Featured image of post Docker部署单机Nacos和集群Nacos" /&gt;&lt;h2 id=&#34;一单机部署&#34;&gt;（一）单机部署&lt;/h2&gt;
&lt;h3 id=&#34;1-拉取nacos镜像&#34;&gt;1. 拉取Nacos镜像&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;我这里拉取的是 &lt;strong&gt;1.4.2&lt;/strong&gt; 版本的Nacos&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull nacos/nacos-server:1.4.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;2启动-nacos-容器&#34;&gt;2.启动 Nacos 容器&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker  run &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--name nacos -id &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-p 8848:8848 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--privileged&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--restart&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;always &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;JVM_XMS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;256m &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;JVM_XMX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;256m &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;standalone &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;PREFER_HOST_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;hostname &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-v /root/nacos/logs:/home/nacos/logs &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;nacos/nacos-server:1.4.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/DockerDeploySingleNacosAndClusterNacos/docker_command1.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/DockerDeploySingleNacosAndClusterNacos/docker_command1.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境参数说明：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th&gt;option&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MODE&lt;/td&gt;
&lt;td&gt;cluster/standalone&lt;/td&gt;
&lt;td&gt;cluster/standalone default &lt;strong&gt;cluster&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_SERVERS&lt;/td&gt;
&lt;td&gt;nacos cluster address&lt;/td&gt;
&lt;td&gt;eg. ip1:port1 ip2:port2 ip3:port3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PREFER_HOST_MODE&lt;/td&gt;
&lt;td&gt;Whether hostname are supported&lt;/td&gt;
&lt;td&gt;hostname/ip default &lt;strong&gt;ip&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_APPLICATION_PORT&lt;/td&gt;
&lt;td&gt;nacos server port&lt;/td&gt;
&lt;td&gt;default &lt;strong&gt;8848&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_SERVER_IP&lt;/td&gt;
&lt;td&gt;custom nacos server ip when network was mutil-network&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SPRING_DATASOURCE_PLATFORM&lt;/td&gt;
&lt;td&gt;standalone support mysql&lt;/td&gt;
&lt;td&gt;mysql / empty default empty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MYSQL_SERVICE_HOST&lt;/td&gt;
&lt;td&gt;mysql host&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MYSQL_SERVICE_PORT&lt;/td&gt;
&lt;td&gt;mysql database port&lt;/td&gt;
&lt;td&gt;default : &lt;strong&gt;3306&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MYSQL_SERVICE_DB_NAME&lt;/td&gt;
&lt;td&gt;mysql database name&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MYSQL_SERVICE_USER&lt;/td&gt;
&lt;td&gt;username of database&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MYSQL_SERVICE_PASSWORD&lt;/td&gt;
&lt;td&gt;password of database&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MYSQL_DATABASE_NUM&lt;/td&gt;
&lt;td&gt;It indicates the number of database&lt;/td&gt;
&lt;td&gt;default :&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MYSQL_SERVICE_DB_PARAM&lt;/td&gt;
&lt;td&gt;Database url parameter&lt;/td&gt;
&lt;td&gt;default : &lt;strong&gt;characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JVM_XMS&lt;/td&gt;
&lt;td&gt;-Xms&lt;/td&gt;
&lt;td&gt;default :1g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JVM_XMX&lt;/td&gt;
&lt;td&gt;-Xmx&lt;/td&gt;
&lt;td&gt;default :1g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JVM_XMN&lt;/td&gt;
&lt;td&gt;-Xmn&lt;/td&gt;
&lt;td&gt;default :512m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JVM_MS&lt;/td&gt;
&lt;td&gt;-XX:MetaspaceSize&lt;/td&gt;
&lt;td&gt;default :128m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JVM_MMS&lt;/td&gt;
&lt;td&gt;-XX:MaxMetaspaceSize&lt;/td&gt;
&lt;td&gt;default :320m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_DEBUG&lt;/td&gt;
&lt;td&gt;enable remote debug&lt;/td&gt;
&lt;td&gt;y/n default :n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TOMCAT_ACCESSLOG_ENABLED&lt;/td&gt;
&lt;td&gt;server.tomcat.accesslog.enabled&lt;/td&gt;
&lt;td&gt;default :false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_AUTH_SYSTEM_TYPE&lt;/td&gt;
&lt;td&gt;The auth system to use, currently only &amp;lsquo;nacos&amp;rsquo; is supported&lt;/td&gt;
&lt;td&gt;default :nacos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_AUTH_ENABLE&lt;/td&gt;
&lt;td&gt;If turn on auth system&lt;/td&gt;
&lt;td&gt;default :false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_AUTH_TOKEN_EXPIRE_SECONDS&lt;/td&gt;
&lt;td&gt;The token expiration in seconds&lt;/td&gt;
&lt;td&gt;default :18000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_AUTH_TOKEN&lt;/td&gt;
&lt;td&gt;The default token&lt;/td&gt;
&lt;td&gt;default :SecretKey012345678901234567890123456789012345678901234567890123456789&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_AUTH_CACHE_ENABLE&lt;/td&gt;
&lt;td&gt;Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.&lt;/td&gt;
&lt;td&gt;default : false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEMBER_LIST&lt;/td&gt;
&lt;td&gt;Set the cluster list with a configuration file or command-line argument&lt;/td&gt;
&lt;td&gt;eg:192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EMBEDDED_STORAGE&lt;/td&gt;
&lt;td&gt;Use embedded storage in cluster mode without mysql&lt;/td&gt;
&lt;td&gt;&lt;code&gt;embedded&lt;/code&gt; default : none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_AUTH_CACHE_ENABLE&lt;/td&gt;
&lt;td&gt;nacos.core.auth.caching.enabled&lt;/td&gt;
&lt;td&gt;default : false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE&lt;/td&gt;
&lt;td&gt;nacos.core.auth.enable.userAgentAuthWhite&lt;/td&gt;
&lt;td&gt;default : false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_AUTH_IDENTITY_KEY&lt;/td&gt;
&lt;td&gt;nacos.core.auth.server.identity.key&lt;/td&gt;
&lt;td&gt;default : serverIdentity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_AUTH_IDENTITY_VALUE&lt;/td&gt;
&lt;td&gt;nacos.core.auth.server.identity.value&lt;/td&gt;
&lt;td&gt;default : security&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NACOS_SECURITY_IGNORE_URLS&lt;/td&gt;
&lt;td&gt;nacos.security.ignore.urls&lt;/td&gt;
&lt;td&gt;default : &lt;code&gt;/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3-访问-nacos&#34;&gt;3. 访问 Nacos&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 &lt;strong&gt;http://{ip}:8848/nacos/&lt;/strong&gt;  进行访问&lt;/p&gt;
&lt;p&gt;用户名和密码都是：&lt;strong&gt;nacos&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/DockerDeploySingleNacosAndClusterNacos/nacos_login.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/DockerDeploySingleNacosAndClusterNacos/nacos_login.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/DockerDeploySingleNacosAndClusterNacos/nacos_main.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/DockerDeploySingleNacosAndClusterNacos/nacos_main.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;二集训部署-nacos&#34;&gt;（二）集训部署 Nacos&lt;/h2&gt;
&lt;h3 id=&#34;1-集群说明&#34;&gt;1. 集群说明&lt;/h3&gt;
&lt;h4 id=&#34;1集群结构图&#34;&gt;（1）集群结构图：&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/DockerDeploySingleNacosAndClusterNacos/image-20210409211355037.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/DockerDeploySingleNacosAndClusterNacos/image-20210409211355037.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;2三个nacos节点的地址&#34;&gt;（2）三个nacos节点的地址：&lt;/h4&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;ip&lt;/th&gt;
&lt;th&gt;port&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;nacos1&lt;/td&gt;
&lt;td&gt;192.168.187.129&lt;/td&gt;
&lt;td&gt;8845&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nacos2&lt;/td&gt;
&lt;td&gt;192.168.187.129&lt;/td&gt;
&lt;td&gt;8846&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nacos3&lt;/td&gt;
&lt;td&gt;192.168.187.129&lt;/td&gt;
&lt;td&gt;8847&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-搭建集群的基本步骤&#34;&gt;2. 搭建集群的基本步骤：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;搭建数据库，初始化数据库表结构&lt;/li&gt;
&lt;li&gt;使用Docker 集群方式启动nacos&lt;/li&gt;
&lt;li&gt;Nginx反向代理 nacos&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3-初始化数据库&#34;&gt;3. 初始化数据库&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Nacos默认数据存储在内嵌数据库Derby中，不属于生产可用的数据库。&lt;/p&gt;
&lt;p&gt;官方推荐的最佳实践是使用带有主从的高可用数据库集群，主从模式的高可用数据库可以参考&lt;strong&gt;传智教育&lt;/strong&gt;的后续高手课程。&lt;/p&gt;
&lt;p&gt;这里我们以单点的数据库为例来部署。&lt;/p&gt;
&lt;p&gt;首先新建一个数据库，命名为nacos，而后导入下面的SQL：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config_info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;longtext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;md5&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创建时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_modified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;修改时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;source user&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src_ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;source ip&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;租户字段&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c_desc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c_use&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c_schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_configinfo_datagrouptenant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;config_info&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   数据库全名 = nacos_config   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   表名称 = config_info_aggr   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config_info_aggr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;group_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datum_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;datum_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;longtext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;内容&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_modified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;修改时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;租户字段&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_configinfoaggr_datagrouptenantdatum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datum_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;增加租户字段&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   数据库全名 = nacos_config   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   表名称 = config_info_beta   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config_info_beta&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;group_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;app_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;longtext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beta_ips&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;betaIps&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;md5&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创建时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_modified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;修改时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;source user&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src_ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;source ip&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;租户字段&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_configinfobeta_datagrouptenant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;config_info_beta&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   数据库全名 = nacos_config   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   表名称 = config_info_tag   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config_info_tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;group_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tag_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;app_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;longtext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;md5&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创建时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_modified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;修改时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;source user&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src_ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;source ip&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_configinfotag_datagrouptenanttag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;config_info_tag&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   数据库全名 = nacos_config   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   表名称 = config_tags_relation   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config_tags_relation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tag_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tag_type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;group_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_configtagrelation_configidtag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx_tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;config_tag_relation&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   数据库全名 = nacos_config   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   表名称 = group_capacity   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_capacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;主键ID&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Group ID，空字符表示整个集群&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quota&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;配额，0表示使用默认值&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;usage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;使用量&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;单个配置大小上限，单位为字节，0表示使用默认值&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_aggr_count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;聚合子配置最大个数，，0表示使用默认值&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_aggr_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_history_count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;最大变更历史数量&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创建时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_modified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;修改时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;集群、各Group容量信息表&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   数据库全名 = nacos_config   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   表名称 = his_config_info   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;his_config_info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;app_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;longtext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_modified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src_ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;租户字段&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx_gmt_create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx_gmt_modified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_modified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx_did&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;多租户改造&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   数据库全名 = nacos_config   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   表名称 = tenant_capacity   */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/******************************************/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_capacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;主键ID&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Tenant ID&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quota&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;配额，0表示使用默认值&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;usage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;使用量&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;单个配置大小上限，单位为字节，0表示使用默认值&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_aggr_count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;聚合子配置最大个数&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_aggr_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_history_count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;最大变更历史数量&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创建时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_modified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;修改时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;租户容量信息表&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;kp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_desc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant_desc&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;create_source&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创建时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmt_modified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;修改时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_tenant_info_kptenantid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx_tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant_info&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INDEX&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx_user_role&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ASC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ASC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;USING&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BTREE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;permissions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INDEX&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_role_permission&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;USING&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BTREE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;nacos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;nacos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ROLE_ADMIN&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;4-集群方式启动nacos&#34;&gt;4. 集群方式启动nacos&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;三个nacos部署在同一台服务器上，服务器ip：192.168.187.129，将8845、8846、8847三个端口分别映射到三个docker容器，自己根据实际情况自行调整 .&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nacos_1&lt;/strong&gt; 端口：8845&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -d &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;PREFER_HOST_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;hostname &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;NACOS_APPLICATION_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8845&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;NACOS_SERVERS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.187.129:8845 192.168.187.129:8846 192.168.187.129:8847&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;SPRING_DATASOURCE_PLATFORM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mysql &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_HOST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;192.168.187.129 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3306&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_USER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;root &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;LZH7895123lzh &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_DB_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;nacos &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;NACOS_SERVER_IP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;192.168.187.129 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;JVM_XMS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;256m &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;JVM_XMX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;256m &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-p 8845:8845 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;nacos_1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;nacos/nacos-server:1.4.2


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**nacos_2 **端口：8846&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -d &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;PREFER_HOST_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;hostname &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;NACOS_APPLICATION_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8846&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;NACOS_SERVERS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.187.129:8845 192.168.187.129:8846 192.168.187.129:8847&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;SPRING_DATASOURCE_PLATFORM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mysql &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_HOST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;192.168.187.129 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3306&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_USER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;root &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;LZH7895123lzh &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_DB_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;nacos &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;NACOS_SERVER_IP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;192.168.187.129 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;JVM_XMS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;256m &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;JVM_XMX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;256m &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-p 8846:8846 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;nacos_2 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;nacos/nacos-server:1.4.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;nacos_3&lt;/strong&gt;端口：8847&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -d &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;PREFER_HOST_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;hostname &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;NACOS_APPLICATION_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8847&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;NACOS_SERVERS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.187.129:8845 192.168.187.129:8846 192.168.187.129:8847&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;SPRING_DATASOURCE_PLATFORM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mysql &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_HOST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;192.168.187.129 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3306&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_USER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;root &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;LZH7895123lzh &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_SERVICE_DB_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;nacos &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;NACOS_SERVER_IP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;192.168.187.129 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;JVM_XMS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;256m &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;JVM_XMX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;256m &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-p 8847:8847 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;nacos_3 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;nacos/nacos-server:1.4.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;5-nginx-反向代理-nacos&#34;&gt;5. Nginx 反向代理 Nacos&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;新建nginx.conf 配置文件，复制下面配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;k&#34;&gt;worker_processes&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;events&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;worker_connections&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;http&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;include&lt;/span&gt;       &lt;span class=&#34;s&#34;&gt;mime.types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;default_type&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;application/octet-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;sendfile&lt;/span&gt;        &lt;span class=&#34;no&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;keepalive_timeout&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;upstream&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;192.168.187.129&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8845&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;192.168.187.129&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8846&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;192.168.187.129&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8847&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;server_name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;kn&#34;&gt;proxy_pass&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;http://cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过docker启动 Nginx&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run --name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;nginx -v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -p 80:80 -d nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;6-访问-nacos&#34;&gt;6. 访问 Nacos&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;输入 http://192.168.187.129/nacos 进行访问&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/DockerDeploySingleNacosAndClusterNacos/nacos_cluster1.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/DockerDeploySingleNacosAndClusterNacos/nacos_cluster1.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Docker部署MQTT</title>
        <link>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2mqtt/</link>
        <pubDate>Fri, 10 Dec 2021 23:25:49 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2mqtt/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/mqtt.png" alt="Featured image of post Docker部署MQTT" /&gt;&lt;h1 id=&#34;docker-部署-exq-mqtt&#34;&gt;Docker 部署 EXQ MQTT&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的&amp;quot;轻量级&amp;quot;通讯协议。&lt;/p&gt;
&lt;p&gt;在软件开发中，常使用MQTT协议进行消息广播，因为MQTT是一个协议，所以我们需要搭建一个支持MQTT协议的服务器，使服务端和客户端能够通过这个MQTT服务器（broker）进行消息转发、通信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;下载mqtt服务器emqx-镜像&#34;&gt;下载MQTT服务器emqx 镜像&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;EMQ X&lt;/em&gt; (Erlang/Enterprise/Elastic MQTT Broker) 是基于 Erlang/OTP 平台开发的开源物联网 MQTT 消息服务器。官方有提供Docker版本，可以直接使用docker pull 进行下载。&lt;/p&gt;
&lt;p&gt;它是目前MQTT服务器中，最优秀的产品之一，其优点有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;稳定承载大规模的 MQTT 客户端连接，单服务器节点支持50万到100万连接。&lt;/li&gt;
&lt;li&gt;分布式节点集群，快速低延时的消息路由，单集群支持1000万规模的路由。&lt;/li&gt;
&lt;li&gt;消息服务器内扩展，支持定制多种认证方式、高效存储消息到后端数据库。&lt;/li&gt;
&lt;li&gt;完整物联网协议支持，MQTT、MQTT-SN、CoAP、LwM2M、WebSocket 或私有协议支持。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下载命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull emqx/emqx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;通过镜像启动mqtt服务器&#34;&gt;通过镜像启动MQTT服务器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -id --name emqx -p 18083:18083 -p 1883:1883 emqx/emqx:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动后，登录mqtt管理页面：http://{ip}:18083，确认部署成功。
默认账号：admin
默认密码：public&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/dockerDeployMQTT/home.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/dockerDeployMQTT/home.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Docker部署ekuiper和ekuiper_manager</title>
        <link>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2ekuiper%E5%92%8Cekuiper_manager/</link>
        <pubDate>Fri, 10 Dec 2021 23:01:48 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2ekuiper%E5%92%8Cekuiper_manager/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/eKuiper.png" alt="Featured image of post Docker部署ekuiper和ekuiper_manager" /&gt;&lt;h1 id=&#34;docker-部署-kuiper-和-kuiper-manager&#34;&gt;docker 部署 kuiper 和 kuiper-manager&lt;/h1&gt;
&lt;h2 id=&#34;1-拉取kuiper镜像&#34;&gt;1. 拉取kuiper镜像&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ekuiper分为3种版本，以 1.4为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1.4 开发版本  有运行的一些包，还有golang的开发环境&lt;/li&gt;
&lt;li&gt;1.4-slim 装有一些运行包  但是没有golang的环境   &lt;strong&gt;官方推荐&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;1.4-alpine 最小版本，通常作为DockerFile的基础镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull lfedge/ekuiper:1.4-slim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;2-运行-kuiper容器&#34;&gt;2. 运行 kuiper容器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;kuiper的默认端口是&lt;em&gt;&lt;strong&gt;9081&lt;/strong&gt;&lt;/em&gt; 以后通过&lt;strong&gt;REST API&lt;/strong&gt; 调用或者通过下面的 &lt;strong&gt;kuiper_manager&lt;/strong&gt;管理时 会用到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -d --name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kuiper -p 9081:9081 -e &lt;span class=&#34;nv&#34;&gt;MQTT_SOURCE_DEFAULT_SERVICES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=[&lt;/span&gt;tcp://192.168.187.129:1883&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; lfedge/ekuiper:1.4-slim 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;​		我是通过docker run时的环境参数&amp;rsquo;MQTT_SOURCE_DEFAULT_SERVICES&amp;rsquo;指定的emqx mqtt服务器地址，但是在运行kuiper后，进入kuiper容器里面使用cat命令查看 /kuiper/etc/路径下的mqtt_source.yaml配置文件，发现mqtt服务器的地址并没有改变里面。导致后面ekuiper配置规则时连接不上mqtt服务器。&lt;/p&gt;
&lt;p&gt;**解决办法：**先将原来的mqtt_source.yaml 文件删除，在通过 &lt;code&gt;cat &amp;gt;&amp;gt; mqtt_source.yaml&lt;/code&gt;将下面这段更改好mqtt服务器地址的配置复制过去:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;qos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tcp://192.168.187.129:1883]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;demo_conf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#Conf_key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;qos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tcp://10.211.55.6:1883, tcp://127.0.0.1]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;3-拉取-kuiper-manager-镜像&#34;&gt;3. 拉取 kuiper-manager 镜像&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull emqx/kuiper-manager:1.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;4-运行-kuiper-manager&#34;&gt;4. 运行 kuiper-manager&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -d --name kuiperManager -p 9082:9082 emqx/kuiper-manager:1.2.1 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/dockerDeployEkuiper_ekuiperManager/main.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/dockerDeployEkuiper_ekuiperManager/main.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;主界面&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;主界面&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;5-通过ekuiper_manager管理ekuiper实例&#34;&gt;5. 通过ekuiper_manager管理ekuiper实例&lt;/h2&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;1--添加ekuiper节点&#34;&gt;1.  添加ekuiper节点&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/dockerDeployEkuiper_ekuiperManager/add_ekuiper.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/dockerDeployEkuiper_ekuiperManager/add_ekuiper.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;添加ekuiper&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;添加ekuiper&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;2-创建流-和-规则&#34;&gt;2. 创建流 和 规则&lt;/h3&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Docker部署SpringBoot的jar</title>
        <link>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2springboot%E7%9A%84jar/</link>
        <pubDate>Wed, 08 Dec 2021 20:53:40 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2springboot%E7%9A%84jar/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/spring_boot.jpg" alt="Featured image of post Docker部署SpringBoot的jar" /&gt;&lt;h2 id=&#34;1--springboot通过maven打包成jar-部署到docker&#34;&gt;1.  SpringBoot通过Maven打包成jar 部署到Docker&lt;/h2&gt;
&lt;h3 id=&#34;一maven执行打包命令&#34;&gt;一、Maven执行打包命令&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通常SpringBoot项目会使用 &lt;em&gt;&lt;strong&gt;spring-boot-maven-plugin&lt;/strong&gt;&lt;/em&gt; 插件 来打包项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    	&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- Jar包的名称 --&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;FeiGangBao&lt;span class=&#34;nt&#34;&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- 指定该Main Class为全局的唯一入口 --&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;mainClass&amp;gt;&lt;/span&gt;com.lizihao.FeiGangBaoApplication&lt;span class=&#34;nt&#34;&gt;&amp;lt;/mainClass&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;layout&amp;gt;&lt;/span&gt;ZIP&lt;span class=&#34;nt&#34;&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span class=&#34;c&#34;&gt;&amp;lt;!--可以把依赖的包都打包到生成的Jar包中--&amp;gt;&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;repackage&lt;span class=&#34;nt&#34;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/dockerDeploySpringBoot/maven_clean_package.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/dockerDeploySpringBoot/maven_clean_package.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;mvn package&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;mvn package&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;二把打包的-jar文件上传到-centos服务器上&#34;&gt;二、把打包的 Jar文件上传到 Centos服务器上&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;步骤 略&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;三创建-dockerfile-文件&#34;&gt;三、创建 dockerFile 文件&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;先使用 vim 命令 创建 dockerfile&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim dockerfile

&lt;span class=&#34;c1&#34;&gt;#dockerfile内容：&lt;/span&gt;
FROM java:8
MAINTAINER lizihao &amp;lt;lizihao_email@163.com&amp;gt;
ADD FeiGangBao.jar /root/app.jar
CMD java -jar /root/app.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;四通过docker-build-命令构建-docker镜像&#34;&gt;四、通过docker build 命令构建 docker镜像&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#    构建命令    文件位置       镜像名称:版本号 上下文.代表当前上下文&lt;/span&gt;
docker build -f dockerfile -t fgb:1.3 .
&lt;span class=&#34;c1&#34;&gt;#使用docker images命令查看镜像&lt;/span&gt;
docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/dockerDeploySpringBoot/docker_images.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/dockerDeploySpringBoot/docker_images.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;docker_images&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;docker_images&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;五启动刚刚创建的-docker-镜像&#34;&gt;五、启动刚刚创建的 docker 镜像&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#--参数说明--&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# -id:在后台运行、-it:直接运行可以查看运行情况，退出就停止容器&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# -p:指定映射端口 宿主机端口:docker容器端口&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# --name:指定容器名称&lt;/span&gt;
docker run -it -p 9109:9109 --name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;fgb_provider1.3 fgb:1.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;2-将lib-和-jar包分开的方式部署&#34;&gt;2. 将lib 和 jar包分开的方式部署&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Why? 因为通过 &lt;em&gt;&lt;strong&gt;spring-boot-maven-plugin&lt;/strong&gt;&lt;/em&gt; 插件 来打包项目默认会将项目中的所有用到的依赖打包到 jar中，导致jar文件太大 每次部署传输慢 所以下面我们采用lib 和 jar 分开部署的方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;一使用分开打包方式-打包-maven项目&#34;&gt;一、使用分开打包方式 打包 maven项目&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;首先回到上面的打包位置，将下面的xml添加到 &lt;!-- raw HTML omitted --&gt;节点中&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;includes&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;include&amp;gt;&lt;/span&gt;
          &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- 排除所有Jar --&amp;gt;&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;nothing&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;nothing&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;/include&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/includes&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/dockerDeploySpringBoot/pom.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/dockerDeploySpringBoot/pom.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;pom.xml&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;pom.xml&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重新使用 package 打包成 jar&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;将 lib 文件和 jar文件 上传到 服务器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 vim 命令修改dockerfile文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修改&lt;/strong&gt; 通过 -Dloader.path=&amp;quot;/root/lib/&amp;quot; 参数 指定java运行程序时从/root/lib/路径下找依赖的jar包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;FROM java:8
MAINTAINER lizihao &amp;lt;lizihao_email@163.com&amp;gt;
ADD FeiGangBao.jar /root/app.jar
CMD java -Dloader.path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/root/lib/&amp;#34;&lt;/span&gt; -jar /root/app.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;p&gt;通过dockerfile文件 构建镜像文件 不变&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#    构建命令    文件位置       镜像名称:版本号 上下文.代表当前上下文&lt;/span&gt;
docker build -f dockerfile -t fgb:1.3 .
&lt;span class=&#34;c1&#34;&gt;#使用docker images命令查看镜像&lt;/span&gt;
docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;
&lt;p&gt;通过docker镜像 运行容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#--参数说明--&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# -id:在后台运行、-it:直接运行可以查看运行情况，退出就停止容器&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# -p:指定映射端口 宿主机端口:docker容器端口&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# -v:挂载数据卷 宿主机的文件路径:docker容器内的文件路径&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# --name:指定容器名称&lt;/span&gt;
docker run -id -p 9109:9109 -v /root/web_app/fgb/lib:/root/lib/ --name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;fgb_provider1.3 fgb:1.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/dockerDeploySpringBoot/docker_run.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/dockerDeploySpringBoot/docker_run.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;docker_run&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;docker_run&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Maven安装本地的jar到本地仓库</title>
        <link>https://lzh54080452.github.io/p/maven%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0%E7%9A%84jar%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</link>
        <pubDate>Wed, 08 Dec 2021 20:53:40 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/maven%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0%E7%9A%84jar%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/maven.png" alt="Featured image of post Maven安装本地的jar到本地仓库" /&gt;&lt;h1 id=&#34;maven安装本地的jar包到本地仓库&#34;&gt;Maven安装本地的jar包到本地仓库&lt;/h1&gt;
&lt;h2 id=&#34;一命令&#34;&gt;一、命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;n&#34;&gt;mvn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;install-file&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;-Dfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;={&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jar包路径&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;-DgroupId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;={&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;-DartifactId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;={&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;artifactId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;-Dversion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;={&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;版本号&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;-Dpackaging&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Docker部署FastDFS</title>
        <link>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2fastdfs/</link>
        <pubDate>Mon, 13 Sep 2021 14:05:02 +0200</pubDate>
        
        <guid>https://lzh54080452.github.io/p/docker%E9%83%A8%E7%BD%B2fastdfs/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/docker.jpeg" alt="Featured image of post Docker部署FastDFS" /&gt;&lt;h2 id=&#34;docker-部署-fastdfs&#34;&gt;Docker 部署 FastDFS&lt;/h2&gt;
&lt;h3 id=&#34;一docker-拉取-fastdfs-镜像&#34;&gt;一、docker 拉取 FastDFS 镜像&lt;/h3&gt;
&lt;blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull season/fastdfs:1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/dockerInatallFastDFS/1638959774996.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/dockerInatallFastDFS/1638959774996.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;docker cmd&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;docker cmd&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;二运行tracker&#34;&gt;二、运行Tracker&lt;/h3&gt;
&lt;blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -ti -d --name trakcer -v /opt/fastdfs/tracker_data:/fastdfs/tracker/data --net=host season/fastdfs:1.2 tracker
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;三运行-storage&#34;&gt;三、运行 Storage&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注意替换{ipaddress}&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -ti -d --name storage -v /opt/fastdfs/storage_data:/fastdfs/storage/data -v /opt/fastdfs/store_path:/fastdfs/store_path --net=host -e TRACKER_SERVER:{ipaddress}:22122 season/fastdfs:1.2 storage
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;四修改-fastdfs-配置文件&#34;&gt;四、修改 FastDFS 配置文件&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;启动完Tracker 和 Storage 后 接下来修改 默认的配置文件&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#首先将storage 容器里面的 /fdfs_conf/ 目录下所以配置文件使用docker cp 命令复制出来
docker cp storage:/fdfs_conf/. /usr/local/fastdfs/conf

#编辑 tracker.conf 文件，将bind_addr字段的值替换成本机的IP
vim tracker.conf
bind_addr=${ipaddress}
#编辑 storage.conf 文件，将tracker_server字段的值替换成本机的IP
vim storage.conf
tracker_server=${ipaddress}:22122
#编辑 client.conf 文件，将tracker_server字段的值替换成本机的IP
vim client.conf
tracker_server=${ipaddress}:22122
 
#将修改完的配置文件cp回镜像中
docker cp /usr/local/fastdfs/conf/. storage:/fdfs_conf
 
#重启storage服务
docker restart storage
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;五配置-nginx--ngx_fastdfs_module&#34;&gt;五、配置 nginx &amp;amp; ngx_fastdfs_module&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;创建一个 nginx.conf 文件 复制下面配置&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;server {
        listen       80;
        server_name  cq.lizihao.ltd;
     
      location /lzh/data {
      	alias /usr/share/nginx/html/Data;  
      }
      
      location /ljf/CheshireMusic {
	  try_files $uri $uri/ @router;
         index  index.html index.htm;
	     alias /usr/share/nginx/html/jinfa/CheshireMusic;
      }

      location = /50x.html   {
           root   html;
       }

      location /group1/M00 {
          #root  /fastdfs/store_path/data;
          ngx_fastdfs_module;
       }

   }
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;em&gt;编辑 之前 cp 出的 mod_fastdfs.conf 文件&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#添加这行配置
url_have_group_name=true
#在40行处 修改 tracker_server的IP地址
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/dockerInatallFastDFS/12342342343.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/dockerInatallFastDFS/12342342343.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;docker conf&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;docker conf&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;六启动-nginx&#34;&gt;六、启动 Nginx&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;当中参数 -v 由于我本身nginx 部署有应用 所以要加入其它的数据卷&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -id --name fastdfs_nginx --restart=always -v /opt/fastdfs/store_path:/fastdfs/store_path -v /root/nginx/conf/nginx.conf:/etc/nginx/conf/nginx.conf -v /root/fastdfs/conf/mod_fastdfs.conf:/etc/fdfs/mod_fastdfs.conf -v /root/nginx/logs:/var/log/nginx -v /root/nginx/html:/usr/share/nginx/html -p 8888:80 -e GROUP_NAME=group1 -e TRACKER_SERVER=81.71.103.97:22122 -e STORAGE_SERVER_PORT=23000 season/fastdfs:1.2 nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;七配置或者关闭防火墙&#34;&gt;七、配置或者关闭防火墙&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;配置防火墙&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;firewall-cmd --zone=public --add-port=22122/tcp --permanent
firewall-cmd --zone=public --add-port=8888/tcp --permanent
firewall-cmd --zone=public --add-port=23000/tcp --permanent
firewall-cmd --reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者 关闭防火墙&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;systemctl stop firewalld.service 
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>设计模式</title>
        <link>https://lzh54080452.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <pubDate>Tue, 10 Aug 2021 13:32:00 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
        <description>&lt;h1 id=&#34;设计模式笔记&#34;&gt;设计模式笔记&lt;/h1&gt;
&lt;h2 id=&#34;一设计模式的目的&#34;&gt;一、设计模式的目的&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;代码重用性**（相同功能的代码，不用多次编写）**&lt;/li&gt;
&lt;li&gt;可读性 &lt;strong&gt;（编码规范性，便于其他程序员阅读和理解）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可扩展性**（当需要增加功能时，能方便的扩展）**&lt;/li&gt;
&lt;li&gt;可靠性**（新增功能后，对原来的功能没有任何影响）**&lt;/li&gt;
&lt;li&gt;使程序呈现高内聚，低耦合&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二设计模式的七大原则&#34;&gt;二、设计模式的七大原则&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&#34;单一职责原则&#34;&gt;&lt;strong&gt;单一职责原则&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;降低类的复杂度，一个类应该只负责一项职责或者一个任务（如：用户类只处理用户的业务）&lt;/li&gt;
&lt;li&gt;提高类的可读性，可维护性&lt;/li&gt;
&lt;li&gt;降低变更引起的风险&lt;/li&gt;
&lt;li&gt;通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级别违反单一职责原则；只有类中的方法数足够的少，才可以在方法级别保持单一职责原则&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;接口隔离原则&#34;&gt;&lt;strong&gt;接口隔离原则&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一个类应该依赖接口时，不应该实现它不需要的接口方法，就是用不到的方法就把它拆分成多个小的接口，依赖小的接口就可以了&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;依赖倒转倒置原则&#34;&gt;&lt;strong&gt;依赖倒转（倒置）原则&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;高层模块不依赖与低层模块，二者应该依赖于共同的抽象类或者接口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象不应该依赖细节，细节应依赖抽象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;依赖倒转原则的中心思想是&lt;strong&gt;面向接口编程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;实现理念：抽象指的是抽象类或者接口；细节指的是接口或者抽象类的具体实现类；抽象相对于实现来比要稳定的多，没有那么多变&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;抽象类或者接口的目的是为了制定好规范&lt;/strong&gt;，这样不用涉及具体的操作，具体的操作交给他们的实现类去完成&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖关系传递的3种方式&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接口传递&lt;/li&gt;
&lt;li&gt;构造函数传递&lt;/li&gt;
&lt;li&gt;set传递&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意事项和细节&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;低层模块尽量都要有抽象类和接口，或者两者都有，程序的稳定性才好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变量的声明类型尽量是抽象类或者接口，这样变量引用和实际对象之间就存在一个缓冲层，便于程序的扩展性和优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继承时遵循里氏替换原则&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;里氏替换原则&#34;&gt;&lt;strong&gt;里氏替换原则&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;继承给程序设计带来便利（继承是为了代码复用，避免重复代码）的同时也带来了弊端，会增加对象间的耦合性，如 &lt;strong&gt;修改父类的方法时要考虑到所有子类，修改后可能子类的功能会产生影响&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;所有&lt;strong&gt;引用基类的地方必须能透明的使用其子类的对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在使用继承时，遵循里氏替换原则，&lt;strong&gt;子类中尽量不要重写父类的方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;继承使两个类的耦合性增强了，在适当的情况下，&lt;strong&gt;可以通过聚合、组合、依赖的方法来解决问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;通用的做法，原来的父类和子类都继承一个通用的基类，原有的继承关系就去掉了，采用依赖、组合、聚合等关系代替&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;开闭原则ocp&#34;&gt;&lt;strong&gt;开闭原则&lt;/strong&gt;（ocp）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;模块和函数对扩展开放（对提供方），对修改关闭（对使用方）。用抽象构建框架，用实现扩展细节&lt;/li&gt;
&lt;li&gt;在软件需求变化的时候，尽量&lt;strong&gt;通过扩展软件方法或者类&lt;/strong&gt;来实现，而&lt;strong&gt;不是通过修改原有的代码&lt;/strong&gt;来实现&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;迪米特法则&#34;&gt;&lt;strong&gt;迪米特法则&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;迪米特法则又称 &lt;strong&gt;最少知道原则&lt;/strong&gt; 在一个类中调用另一个类的方法，不需要知道它怎么实现的，也就是说，就只需要调用它的方法就完成功能，具体怎么实现的写在被调用方法里&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;合成复用原则&#34;&gt;&lt;strong&gt;合成复用原则&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;原则时尽量使用合成/聚合的方式，而不是继承，因为继承耦合性太强了&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;三设计模式原则的核心思想&#34;&gt;三、设计模式原则的核心思想&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;找出应用中可能需要变化的地方，将它们独立出来，不要和哪些不需要变化的代码混在一起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对接口编程，而不是针对实现编程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了交互对象之间的松耦合设计而努力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;四uml类图&#34;&gt;四、UML类图&lt;/h2&gt;
&lt;p&gt;（一） 类之间的关系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;依赖  （只要在类中用到对方，那么他们就存在依赖关系）&lt;/p&gt;
&lt;p&gt;（1） 在类中用到对方就是依赖关系&lt;/p&gt;
&lt;p&gt;（2）是类的成员属性&lt;/p&gt;
&lt;p&gt;（3）是方法的返回值类型&lt;/p&gt;
&lt;p&gt;（4）是方法接受的参数类型&lt;/p&gt;
&lt;p&gt;（5）方法中使用到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;泛化（实际上就是继承关系，他是依赖关系的一种特例）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现（就是实现关系，也是依赖关系的一种特例）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关联（就是&lt;strong&gt;类与类之间的联系&lt;/strong&gt;，分为&lt;strong&gt;单向一对一关系&lt;/strong&gt;，&lt;strong&gt;双向一对一关系&lt;/strong&gt;，具有导航性（谁继承谁）、还有多重性）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聚合（聚合关系表示的是整体和部分的关系，&lt;strong&gt;整体与部分可以分开&lt;/strong&gt;。聚合关系是关联关系的特例）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组合（也是整体和部分的关系，强依赖 如 在类中new 对象了 这个对象就不可分离，伴随着类的生命周期 （而不是像聚合关系那样 引用的类定义在成员属性上 通过set方式传入）  ）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（二）用于描述系统中 类本身的组成结构 和 类（对象）之间的各种静态关系&lt;/p&gt;
&lt;h2 id=&#34;五-设计模式的类型&#34;&gt;五、 设计模式的类型&lt;/h2&gt;
&lt;p&gt;设计模式分为三种类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;创建型模式&lt;/strong&gt;&lt;/em&gt;：&lt;strong&gt;单例模式&lt;/strong&gt;、抽象工厂模式、建造者模式、&lt;strong&gt;工厂模式&lt;/strong&gt;、原型模式；&lt;/li&gt;
&lt;li&gt;***结构型模式：***适配器模式、桥接模式、&lt;strong&gt;装饰模式&lt;/strong&gt;、组合模式、外观模式、享元模式、&lt;strong&gt;代理模式&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;***行为型模式：***模板方法模式、命令模式、访问者模式、迭代器模式、&lt;strong&gt;观察者模式&lt;/strong&gt;、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、责任链模式（职责链模式）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;六-单例模式&#34;&gt;六、 单例模式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;单例模式的实现方式有八种：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;饿汉式（静态常量）&lt;/p&gt;
&lt;p&gt;饿汉式（静态代码块）&lt;/p&gt;
&lt;p&gt;懒汉式（线程不安全）&lt;/p&gt;
&lt;p&gt;懒汉式（线程安全，同步方法）&lt;/p&gt;
&lt;p&gt;懒汉式（线程安全、同步代码块）&lt;/p&gt;
&lt;p&gt;双重检查&lt;/p&gt;
&lt;p&gt;静态内部类&lt;/p&gt;
&lt;p&gt;枚举&lt;/p&gt;
&lt;h3 id=&#34;一-饿汉式静态常量&#34;&gt;一、 饿汉式（静态常量）&lt;/h3&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;构造器私有化（防止 new）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类的内部创建对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向外暴露一个静态的公共方法（getInstance）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1625733217020.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1625733217020.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种写法的优缺点：&lt;/p&gt;
&lt;p&gt;**优点：**写法简单，在类装载的时候就能完成实例化。避免了线程同步的问题。&lt;/p&gt;
&lt;p&gt;**缺点：**在类装载的时候就完成了实例化，没有达到 &lt;em&gt;懒加载&lt;/em&gt; 的效果，如果程序从始至终都没用过，就造成了内			存的浪费。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论：这种单例模式可用，但是可能造成内存的浪费。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;二-饿汉式静态代码块&#34;&gt;二、 饿汉式（静态代码块）&lt;/h3&gt;
&lt;p&gt;​	&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1625733969405.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1625733969405.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;​		优缺点都跟 上面的一样，只是写法改变了，将实例化操作放到了静态代码块里面。&lt;/p&gt;
&lt;h3 id=&#34;三-懒汉式线程不安全&#34;&gt;三、 懒汉式（线程不安全）&lt;/h3&gt;
&lt;p&gt;​	&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1625734938187.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1625734938187.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优缺点：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/em&gt;***：***起到了 懒加载 的效果 ，但是只能在单线程下使用&lt;/p&gt;
&lt;p&gt;***缺点：***如果在多线程下使用，第一个线程进入 if(instance==null) 时，			第二个线程也紧接着进来，第一个线程还未创建出对象，所以第			二个判断  if(instance==null)  时还是为true  就会造成创建多个			对象，违背了单例模式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论：在实际开发中，不要使用这种方式&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;四懒汉式线程安全同步方法&#34;&gt;四、懒汉式（线程安全、同步方法）&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;在上面的基础上 在 getInstance() 方法上 加上 synchronized 同步
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;优缺点：&lt;/p&gt;
&lt;p&gt;优点：解决了线程不安全问题&lt;/p&gt;
&lt;p&gt;缺点：效率太低，每次想要获得实例的时候，执行getInstance()都会进			行同步，效率低&lt;/p&gt;
&lt;h3 id=&#34;五懒汉式线程安全同步代码块&#34;&gt;五、懒汉式（线程安全、同步代码块）&lt;/h3&gt;
&lt;p&gt;​	加入了同步代码块 在 判断  null 的下面  加入 synchronized(Singleton.class){ 实例化对象代码 }&lt;/p&gt;
&lt;p&gt;优缺点：存在线程安全问题，不能使用&lt;/p&gt;
&lt;h3 id=&#34;六双重检查&#34;&gt;六、双重检查&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1625750999855.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1625750999855.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;双重验证概念时多线程开发中常用到的，如上图，进行2次null的检查，这样就保证了 线程的安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例化代码只用执行一次，后面在访问时，判断单例对象是否为空时，直接return 实例化对象，避免反复进行方法同步。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程安全；延迟加载（懒加载）；效率较高&lt;/p&gt;
&lt;p&gt;结论：在实际开发中，推荐使用这种单例设计模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;七静态内部类&#34;&gt;七、静态内部类&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1625758791419.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1625758791419.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这种方式采用了类装载机制来保证初始化实例时只有一个线程&lt;/li&gt;
&lt;li&gt;静态的内部类只有在调用getInstance()的时候才会去装载SingletonInstance类&lt;/li&gt;
&lt;li&gt;类的静态属性只会在第一次加载类的时候初始化，JVM保证了线程的安全性，因为在类进行初始化时，别的线程时无法进入的。&lt;/li&gt;
&lt;li&gt;避免了线程不安全，利用静态内部类的特点实现延迟加载，效率高&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;八枚举方式&#34;&gt;八、枚举方式&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1625759518451.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1625759518451.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;​	借助JDK1.5中添加枚举来实现单例模式，不仅能避免多线程同步问题，还能防止反序列化重新创建新的对象。&lt;/p&gt;
&lt;h2 id=&#34;七单例模式的注意事项和使用场景&#34;&gt;七、单例模式的注意事项和使用场景&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单例模式保证了 系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使    用单例模式可以提高系统性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例化一个单例类时，应该是  调用类的获取实例方法，而不是去new&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用场景：需要频繁的进行创建和销毁的对象，或者创建对象耗时过多或者耗费资源过多1) (即：重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、&lt;strong&gt;session&lt;/strong&gt; 工厂等)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;八工厂模式&#34;&gt;八、工厂模式&lt;/h2&gt;
&lt;h3 id=&#34;一-工厂模式的意义&#34;&gt;一、 工厂模式的意义&lt;/h3&gt;
&lt;p&gt;将实例化的代码提取出来，放到一个类中统一管理和维护，这个类就是工厂类，可以达到和主项目依赖关系的解耦，提高项目的拓展和维护性。&lt;/p&gt;
&lt;h3 id=&#34;二-工厂模式分类&#34;&gt;二、 工厂模式分类：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;代码详见工程&lt;/strong&gt; G:\Test_Project\DesignMode\src\main\java\com\lizihao\design\factory&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;*简单工厂模式*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*工厂方法模式*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*抽象工厂模式*&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;三-设计模式的依赖抽象原则&#34;&gt;三、 设计模式的依赖抽象原则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建对象实例时，不要直接 new 类, 而是把这个 new 类的动作放在一个工厂的方法中，并返回。有的书上说， 变量不要直接持有具体类的引用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要让类继承具体类，而是继承抽象类或者是实现 interface(接口)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要覆盖基类中已经实现的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;九原型模式&#34;&gt;九、原型模式&lt;/h2&gt;
&lt;p&gt;原型模式主要用于对象的复制，它的核心是就是类图中的原型类Prototype。Prototype类需要具备以下两个条件：&lt;/p&gt;
&lt;p&gt;实现Cloneable接口。在java语言有一个Cloneable接口，它的作用只有一个，就是在运行时通知虚拟机可以安全地在实现了此接口的类上使用clone方法。在java虚拟机中，只有实现了这个接口的类才可以被拷贝，否则在运行时会抛出CloneNotSupportedException异常。
重写Object类中的clone方法。Java中，所有类的父类都是Object类，Object类中有一个clone方法，作用是返回对象的一个拷贝，但是其作用域protected类型的，一般的类无法调用，因此，Prototype类需要将clone方法的作用域修改为public类型。&lt;/p&gt;
&lt;p&gt;原型模式是一种比较简单的模式，也非常容易理解，实现一个接口，重写一个方法即完成了原型模式。在实际应用中，原型模式很少单独出现。经常与其他模式混用，他的原型类Prototype也常用抽象类来替代。&lt;/p&gt;
&lt;h2 id=&#34;十建造者模式&#34;&gt;十、建造者模式&lt;/h2&gt;
&lt;h3 id=&#34;一基本介绍&#34;&gt;一、基本介绍&lt;/h3&gt;
&lt;p&gt;1）建造者模式（&lt;strong&gt;Builder&lt;/strong&gt; &lt;strong&gt;Pattern&lt;/strong&gt;） 又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。&lt;/p&gt;
&lt;p&gt;2）建造者模式 是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们， 用户不需要知道内部的具体构建细节。&lt;/p&gt;
&lt;h3 id=&#34;二建造者模式的四个角色&#34;&gt;二、建造者模式的四个角色&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Product（产品角色）： 一个具体的产品对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Builder（抽象建造者）： 创建一个 Product 对象的各个部件指定的 接口**/**抽象类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteBuilder（具体建造者）： 实现接口，构建和装配各个部件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Director（指挥者）： 构建一个使用 Builder 接口的对象。它主要是用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626406663765.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626406663765.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;三建造者模式解决盖房的应用案例&#34;&gt;三、建造者模式解决盖房的应用案例&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;需要建房子：这一过程为打桩、砌墙、封顶。不管是普通房子也好，别墅也好都需要经历这些过程，下面我们使用建造者模式(Builder Pattern)来完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思路分析图解(类图)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626406802892.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626406802892.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;四建造者模式注意事项和细节&#34;&gt;四、建造者模式注意事项和细节&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端(使用程序)不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， 用户使用不同的具体建造者即可得到不同的产品对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰， 也更方便使用程序来控制创建过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，因此在这种情况下，要考虑是否选择建造者模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象工厂模式 VS 建造者模式 ：抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;十一适配器模式&#34;&gt;十一、适配器模式&lt;/h2&gt;
&lt;h3 id=&#34;一基本介绍-1&#34;&gt;一、基本介绍&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;适配器模式(Adapter Pattern)将某个类的接口转换成客户端期望的另一个接口表示，主的目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器(Wrapper)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适配器模式属于结构型模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主要分为三类&lt;/strong&gt;：类适配器模式、对象适配器模式、接口适配器模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二工作原理&#34;&gt;二、工作原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;适配器模式：将一个类的接口转换成另一种接口.让原本接口不兼容的类可以兼容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从用户的角度看不到被适配者，是解耦的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用户收到反馈结果，感觉只是和目标接口交互&lt;/p&gt;
&lt;h3 id=&#34;三类适配器模式&#34;&gt;三、类适配器模式&lt;/h3&gt;
&lt;p&gt;​	1) 应用实例说明&lt;/p&gt;
&lt;p&gt;以生活中充电器的例子来讲解适配器，充电器本身相当于 Adapter，220V 交流电相当于 src (即被适配者)，我们的目 dst(即 目标)是 5V 直流电&lt;/p&gt;
&lt;p&gt;​	2) 思路分析(类图)&lt;/p&gt;
&lt;p&gt;​	&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626427286867.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626427286867.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;​	3）类适配器模式的注意细节&lt;/p&gt;
&lt;p&gt;​			1) Java 是单继承机制，所以类适配器需要继承 src 类这一点算是一个缺点, 因为这要求 dst 必须是接口，有				一定局限性;&lt;/p&gt;
&lt;p&gt;​			2) src 类的方法在 Adapter 中都会暴露出来，也增加了使用的成本。&lt;/p&gt;
&lt;p&gt;​			3) 由于其继承了 src 类，所以它可以根据需求重写 src 类的方法，使得 Adapter 的灵活性增强了。&lt;/p&gt;
&lt;h3 id=&#34;四对象适配器模式&#34;&gt;四、对象适配器模式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;基本介绍&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		1) 基本思路和类的适配器模式相同，只是将 Adapter 类作修改，&lt;strong&gt;不是继承 src 类，而是持有 src 类的实			例，以解决兼容性的问题&lt;/strong&gt;。 即：持有 src 类，实现 dst  类接口，完成 src-&amp;gt;dst 的适配&lt;/p&gt;
&lt;p&gt;​		2) 根据“合成复用原则”，在系统中尽量使用关联关系（聚合）来替代继承关系。&lt;/p&gt;
&lt;p&gt;​		3) 对象适配器模式是适配器模式常用的一种&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;应用实例&lt;/p&gt;
&lt;p&gt;以生活中充电器的例子来讲解适配器，充电器本身相当于 Adapter，220V 交流电相当于 src (即被适配者)，我们的目 dst(即目标)是 5V 直流电，使用对象适配器模式完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思路分析(类图)：只需修改适配器即可, 如下:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626427286337.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626427286337.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;五接口适配器模式&#34;&gt;五、接口适配器模式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本介绍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一些书籍称为：适配器模式(Default Adapter Pattern)或缺省适配器模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;核心思路：&lt;strong&gt;当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适用于一个接口不想使用其所有的方法的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626427223337.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626427223337.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;十一桥接模式&#34;&gt;十一、桥接模式&lt;/h2&gt;
&lt;h3 id=&#34;一-基本介绍&#34;&gt;一、 基本介绍&lt;/h3&gt;
&lt;p&gt;​		1) 桥接模式(Bridge 模式)是指：将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变。&lt;/p&gt;
&lt;p&gt;​		2) 是一种结构型设计模式&lt;/p&gt;
&lt;p&gt;​		3) Bridge 模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职		责。它的主要特点是把&lt;strong&gt;抽象&lt;/strong&gt;(Abstraction)与行为&lt;strong&gt;实现&lt;/strong&gt;(Implementation)分离开来，从而可以保持各部分		的独立性以及应对他们的功能扩展&lt;/p&gt;
&lt;h3 id=&#34;二-案例介绍传统方案解决手机操作问题&#34;&gt;二、 案例介绍（传统方案解决手机操作问题）&lt;/h3&gt;
&lt;p&gt;​		传统方式实现&lt;/p&gt;
&lt;p&gt;​		&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626427223313.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626427223313.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;​		使用桥接模式改进传统方式，让程序具有搞好的扩展性，利用程序维护&lt;/p&gt;
&lt;p&gt;​		1) 使用桥接模式对应的类图&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626427223312.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626427223312.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h3 id=&#34;三桥接模式的注意事项和细节&#34;&gt;三、桥接模式的注意事项和细节&lt;/h3&gt;
&lt;p&gt;​		1)实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，			这有助于系统进行分层设计，从而产生更好的结构化系统。&lt;/p&gt;
&lt;p&gt;​		2)对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部分由具体业务来完			成。
​		3)桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护成本。&lt;/p&gt;
&lt;p&gt;​		4)桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽			象进行设计和编程
​		5)桥接模式要求正确识别出系统中两个独立变化的维度(抽象、和实现)，因此其使用范围有一定的局限			性，即需要有这样的应用场景。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;桥接模式其它应用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用.&lt;/p&gt;
&lt;h2 id=&#34;十二-代理模式&#34;&gt;十二、 代理模式&lt;/h2&gt;
&lt;h3 id=&#34;一代理模式介绍&#34;&gt;一、代理模式介绍&lt;/h3&gt;
&lt;p&gt;​		1) 代理模式：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象.这			样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能。&lt;/p&gt;
&lt;p&gt;​		2) 被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象&lt;/p&gt;
&lt;p&gt;​		3) 代理模式有不同的形式, 主要有三种 静态代理、动态代理 (JDK 代理、接口代理)和  &lt;strong&gt;Cglib&lt;/strong&gt; 代理  (可以			在内存动态的创建对象，而不需要实现接口， 他是属于动态代理的范畴) 。&lt;/p&gt;
&lt;p&gt;​		4) 代理模式示意图：&lt;/p&gt;
&lt;p&gt;​			&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626538357598.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626538357598.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;二静态代理&#34;&gt;二、静态代理&lt;/h3&gt;
&lt;p&gt;​		**介绍：**静态代理在使用时,需要定义接口或者父类,被代理对象(即目标对象)与代理对象一起实现相同的接					口或者是继承相同父类&lt;/p&gt;
&lt;p&gt;​			&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626538357577.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626538357577.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态代理模式的优缺点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;优点：在不修改目标对象的功能前提下, 能通过代理对象对目标功能扩展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类、&lt;/p&gt;
&lt;p&gt;​			一旦接口增加方法,目标对象与代理对象都要维护&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;三动态代理&#34;&gt;三、动态代理&lt;/h3&gt;
&lt;p&gt;​	  **介绍：**1) 代理对象,不需要实现接口，但是目标对象要实现接口，否则不能用动态代理&lt;/p&gt;
&lt;p&gt;​				2) 代理对象的生成，是利用 JDK 的 API，动态的在内存中构建代理对象&lt;/p&gt;
&lt;p&gt;​				3) 动态代理也叫做：JDK 代理、接口代理&lt;/p&gt;
&lt;p&gt;​	   **用法：**简单来说就是用Proxy类代理使用  如下图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626597460997.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626597460997.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;四cglib代理&#34;&gt;四、Cglib代理&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态代理和 JDK 代理模式都要求目标对象是实现一个接口,但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候可使用目标对象子类来实现代理-这就是 &lt;strong&gt;Cglib&lt;/strong&gt; 代理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cglib 代理也叫作子类代理**,**它是在内存中构建一个子类对象从而实现对目标对象功能扩展, 有些书也将	Cglib 代理归属到动态代理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cglib 是一个强大的高性能的代码生成包,它可以在运行期扩展 java 类与实现 java 接口.它广泛的被许多 	AOP 的框架使用,例如 Spring AOP，实现方法拦截&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 AOP 编程中如何选择代理模式：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;目标对象需要实现接口，用 JDK 代理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目标对象不需要实现接口，用 Cglib 代理&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cglib 包的底层是通过使用字节码处理框架 ASM 来转换字节码并生成新的类、&lt;/p&gt;
&lt;h2 id=&#34;十三模板方法模式&#34;&gt;十三、模板方法模式&lt;/h2&gt;
&lt;h3 id=&#34;一基本介绍-2&#34;&gt;一、基本介绍&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;模板方法模式（Template Method Pattern），又叫模板模式(Template	Pattern)， 在一个抽象类公开定义了执行它的方法的模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单说，模板方法模式 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这种类型的设计模式属于行为型模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626597460998.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626597460998.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Ø 对原理类图的说明-即(模板方法模式的角色及职责)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;AbstractClass 抽象类， 类中实现了模板方法(template)，定义了算法的骨架，具体子类需要去实现 其它的抽象方法 operationr2,3,4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteClass 实现抽象方法 operationr2,3,4,  以完成算法中特点子类的步骤&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二案例豆浆问题&#34;&gt;二、案例（豆浆问题）&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626785034102.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626785034102.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;三模板方法的注意事项和细节&#34;&gt;三、模板方法的注意事项和细节&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本思想是：算法只存在于一个地方，也就是在父类中，容易修改。需要修改算法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;既统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一般模板方法都加上 final 关键字， 防止子类重写模板方法.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模板方法模式使用场景：当要完成在某个过程，该过程要执行一系列步骤 ，这一系列的步骤基本相同，但其个别步骤在实现时 可能不同，通常考虑用模板方法模式来处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;十四观察者模式&#34;&gt;十四、观察者模式&lt;/h2&gt;
&lt;h3 id=&#34;一基本介绍-3&#34;&gt;一、基本介绍&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;观察者模式类似订牛奶业务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;奶站/气象局：Subject&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户/第三方网站：Observer&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;**Subject：**登记注册、移除和通知&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;registerObserver 注 册&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;removeObserver 移 除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;notifyObservers() 通知所有的注册的用户，根据不同需求，可以是更新数据，让用户来取，也可能是实施推送， 看具体需求定&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;**Observer：**接收输入&lt;/p&gt;
&lt;p&gt;**观察者模式：**对象之间多对一依赖的一种设计方案，被依赖的对象为 Subject，依赖的对象为 Observer，Subject&lt;/p&gt;
&lt;p&gt;通知 Observer 变化,比如这里的奶站是 Subject，是 1 的一方。用户时 Observer，是多的一方。&lt;/p&gt;
&lt;p&gt;下图中  WeatherDatat(天气数据) 是 单一的一方 ，Baidu 和 CurrentCondition 是多 的一方&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626934964414.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626934964414.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;十五策略模式&#34;&gt;十五、策略模式&lt;/h2&gt;
&lt;h3 id=&#34;一基本介绍-4&#34;&gt;一、基本介绍&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;策略模式（Strategy Pattern）中，定义算法族（策略组），分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这算法体现了几个设计原则，第一、把变化的代码从不变的代码中分离出来；第二、针对接口编程而不是具体类（定义了策略接口）；第三、多用组合/聚合，少用继承（客户通过组合方式使用策略）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在软件开发中，我们也常常会遇到类似的情况，实现某一个功能有多条途径，每一条途径对应一种算法，此时我们可以使用一种设计模式来实现灵活地选择解决途径，也能够方便地增加新的解决途径。&lt;/p&gt;
&lt;p&gt;譬如商场购物场景中，有些商品按原价卖，商场可能为了促销而推出优惠活动，有些商品打九折，有些打八折，有些则是返现10元等。&lt;/p&gt;
&lt;p&gt;而优惠活动并不影响结算之外的其他过程，只是在结算的时候需要根据优惠方案结算&lt;/p&gt;
&lt;p&gt;角色：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Context(环境类)&lt;/strong&gt;：环境类是使用算法的角色，它在解决某个问题(即实现某个方法)时可以采用多种策略。在环境类中维持一个对抽象策略类的引用实例，用于定义所采用的策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strategy(抽象策略类)&lt;/strong&gt;：它为所支持的算法声明了抽象方法，是所有策略类的父类，它可以是抽象类或具体类，也可以是接口。环境类通过抽象策略类中声明的方法在运行时调用具体策略类中实现的算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ConcreteStrategy(具体策略类)&lt;/strong&gt;：它实现了在抽象策略类中声明的算法，在运行时，具体策略类将覆盖在环境类中定义的抽象策略类对象，使用一种具体的算法实现某个业务处理。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626935304498.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626935304498.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;十六责任链模式&#34;&gt;十六、责任链模式&lt;/h2&gt;
&lt;h3 id=&#34;一基本介绍-5&#34;&gt;一、基本介绍&lt;/h3&gt;
&lt;p&gt;责任链模式(Iterator Pattern), 是行为型设计模式之一。这种模型结构有点类似现实生活中铁链，由一个个铁环首尾相接构成一条链，如果这种结构用在编程领域，则每个节点可以看做一个对象，每个对象有不同的处理逻辑，将一个请求从链的首端发出，沿着链的路径依次传递每个节点对象，直到有对象处理这个请求为止，我们将这样一种模式称为责任链模式。&lt;/p&gt;
&lt;h3 id=&#34;二责任链模式使用场景&#34;&gt;二、责任链模式使用场景&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;多个对象可以处理同一个请求，但具体由哪个对象处理则在运行时动态决定。&lt;/li&gt;
&lt;li&gt;在请求处理者不明确的情况下向对个对象中的一个提交一个请求。&lt;/li&gt;
&lt;li&gt;需要动态处理一组对象处理请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;UML类图&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626946954313.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626946954313.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;调用过程&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://lzh54080452.github.io/post/test/1626947307481.png&#34; &gt;
		&lt;img src=&#34;https://lzh54080452.github.io/post/test/1626947307481.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>IDEA 快捷键</title>
        <link>https://lzh54080452.github.io/p/idea-%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
        <pubDate>Tue, 12 Mar 2019 09:12:33 +0800</pubDate>
        
        <guid>https://lzh54080452.github.io/p/idea-%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
        <description>&lt;img src="https://lzh54080452.github.io/post/two/pvw.png" alt="Featured image of post IDEA 快捷键" /&gt;&lt;h1 id=&#34;idea-快捷鍵&#34;&gt;Idea 快捷鍵&lt;/h1&gt;
&lt;h2 id=&#34;ctrl&#34;&gt;Ctrl&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + F	在当前文件进行文本查找 （必备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + R	在当前文件进行文本替换 （必备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + Z	撤销 （必备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + Y	删除光标所在行 或 删除选中的行 （必备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + X	剪切光标所在行 或 剪切选择内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + C	复制光标所在行 或 复制选择内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + D	复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + W	递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + E	显示最近打开的文件记录列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + N	根据输入的 类名 查找类文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + G	在当前文件跳转到指定行处&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + J	插入自定义动态代码模板&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + P	方法参数提示显示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + Q	光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + U	前往当前光标所在的方法的父类的方法 / 接口定义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + B	进入光标所在的方法/变量的接口或是定义出，等效于 Ctrl + 左键单击&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + K	版本控制提交项目，需要此项目有加入到版本控制才可用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + T	版本控制更新项目，需要此项目有加入到版本控制才可用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + H	显示当前类的层次结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + O	选择可重写的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + I	选择可继承的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + +	展开代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + -	折叠代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + /	注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + [	移动光标到当前所在代码的花括号开始位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + ]	移动光标到当前所在代码的花括号结束位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + F1	在光标所在的错误代码出显示错误信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + F3	调转到所选中的词的下一个引用位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + F4	关闭当前编辑文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + F8	在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + F9	执行 ‎做‎Project 操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + F11	选中文件 / 文件夹，使用助记符设定 / 取消书签&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + F12	弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + Tab	编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + Enter	智能分隔行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + End	跳到文件尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + Home	跳到文件头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + Space	基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号 （必&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + Delete	删除光标后面的单词或是中文句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + BackSpace	删除光标前面的单词或是中文句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + 1,2,3&amp;hellip;9	定位到对应数值的书签位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + 左键单击	在打开的文件标题上，弹出该文件路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + 光标定位	按 Ctrl 不要松开，会显示光标所在的类信息摘要&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + 左方向键	光标跳转到当前单词 / 中文句的左侧开头位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + 右方向键	光标跳转到当前单词 / 中文句的右侧开头位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + 前方向键	等效于鼠标滚轮向前效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + 后方向键	等效于鼠标滚轮向后效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;alt&#34;&gt;Alt&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Alt + `	显示版本控制常用操作菜单弹出层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + Q	弹出一个提示，显示当前类的声明 / 上下文信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + F1	显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + F2	对于前面页面，显示各类浏览器打开目标选择弹出层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + F3	选中文本，逐个往下查找相同文本，并高亮显示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + F7	查找光标所在的方法 / 变量 / 类被调用的地方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + F8	在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + Home	定位 / 显示到当前文件的 Navigation Bar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + Enter	IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + Insert	代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + 左方向键	按左方向切换当前已打开的文件视图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + 右方向键	按右方向切换当前已打开的文件视图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + 前方向键	当前光标跳转到当前文件的前一个方法名位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + 后方向键	当前光标跳转到当前文件的后一个方法名位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alt + 1,2,3&amp;hellip;9	显示对应数值的选项卡，其中 1 是 Project 用得最多&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shift&#34;&gt;Shift&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Shift + F1	如果有外部文档可以连接外部文档&lt;/li&gt;
&lt;li&gt;Shift + F2	跳转到上一个高亮错误 或 警告位置&lt;/li&gt;
&lt;li&gt;Shift + F3	在查找模式下，查找匹配上一个&lt;/li&gt;
&lt;li&gt;Shift + F4	对当前打开的文件，使用新Windows窗口打开，旧窗口保留&lt;/li&gt;
&lt;li&gt;Shift + F6	对文件 / 文件夹 重命名&lt;/li&gt;
&lt;li&gt;Shift + F7	在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法&lt;/li&gt;
&lt;li&gt;Shift + F8	在 Debug 模式下，跳出，表现出来的效果跟 F9 一样&lt;/li&gt;
&lt;li&gt;Shift + F9	等效于点击工具栏的 Debug 按钮&lt;/li&gt;
&lt;li&gt;Shift + F10	等效于点击工具栏的 Run 按钮&lt;/li&gt;
&lt;li&gt;Shift + F11	弹出书签显示层&lt;/li&gt;
&lt;li&gt;Shift + Tab	取消缩进&lt;/li&gt;
&lt;li&gt;Shift + ESC	隐藏当前 或 最后一个激活的工具窗口&lt;/li&gt;
&lt;li&gt;Shift + End	选中光标到当前行尾位置&lt;/li&gt;
&lt;li&gt;Shift + Home	选中光标到当前行头位置&lt;/li&gt;
&lt;li&gt;Shift + Enter	开始新一行。光标所在行下空出一行，光标定位到新行位置&lt;/li&gt;
&lt;li&gt;Shift + 左键单击	在打开的文件名上按此快捷键，可以关闭当前打开文件&lt;/li&gt;
&lt;li&gt;Shift + 滚轮前后滚动	当前文件的横向滚动轴滚动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ctrl--alt&#34;&gt;Ctrl + Alt&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ctrl + Alt + L	格式化代码，可以对当前文件和整个包目录使用 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + O	优化导入的类，可以对当前文件和整个包目录使用 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + I	光标所在行 或 选中部分进行自动代码缩进，有点类似格式化&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + T	对选中的代码弹出环绕选项弹出层&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + J	弹出模板选择窗口，讲选定的代码加入动态模板中&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + H	调用层次&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + B	在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + V	快速引进变量&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + Y	同步、刷新&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + S	打开 IntelliJ IDEA 系统设置&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + F7	显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + F11	切换全屏模式&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + Enter	光标所在行上空出一行，光标定位到新行&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + Home	弹出跟当前文件有关联的文件弹出层&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + Space	类名自动完成&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + 左方向键	退回到上一个操作的地方 （必备）（注意与其他软件快捷键冲突）&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + 右方向键	前进到上一个操作的地方 （必备）（注意与其他软件快捷键冲突）&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + 前方向键	在查找模式下，跳到上个查找的文件&lt;/li&gt;
&lt;li&gt;Ctrl + Alt + 后方向键	在查找模式下，跳到下个查找的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ctrl--shift&#34;&gt;Ctrl + Shift&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ctrl + Shift + F	根据输入内容查找整个项目 或 指定目录内文件 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + R	根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + J	自动将下一行合并到当前行末尾 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + Z	取消撤销 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + W	递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消&lt;/li&gt;
&lt;li&gt;选中范围 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + N	通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + U	对选中的代码进行大 / 小写轮流转换 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + T	对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + C	复制当前文件磁盘路径到剪贴板&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + V	弹出缓存的最近拷贝的内容管理器弹出层&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + E	显示最近修改的文件列表的弹出层&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + H	显示方法层次结构&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + B	跳转到类型声明处&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + I	快速查看光标所在的方法 或 类的定义&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + A	查找动作 / 设置&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + /	代码块注释 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + [	选中从光标所在位置到它的顶部中括号位置&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + ]	选中从光标所在位置到它的底部中括号位置&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + +	展开所有代码&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + -	折叠所有代码&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + F7	高亮显示所有该选中文本，按Esc高亮消失&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + F8	在 Debug 模式下，指定断点进入条件&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + F9	编译选中的文件 / 包 / Module&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + F12	编辑器最大化&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + Space	智能代码提示&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + Enter	自动结束代码，行末自动添加分号 （必备）&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + Backspace	退回到上次修改的地方&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + 1,2,3&amp;hellip;9	快速添加指定数值的书签&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + 左方向键	在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + 右方向键	在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + 左方向键	在光标焦点是在工具选项卡上，缩小选项卡区域&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + 右方向键	在光标焦点是在工具选项卡上，扩大选项卡区域&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + 前方向键	光标放在方法名上，将方法移动到上一个方法前面，调整方法排序&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + 后方向键	光标放在方法名上，将方法移动到下一个方法前面，调整方法排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;alt--shift&#34;&gt;Alt + Shift&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alt + Shift + N	选择 / 添加 task&lt;/li&gt;
&lt;li&gt;Alt + Shift + F	显示添加到收藏夹弹出层&lt;/li&gt;
&lt;li&gt;Alt + Shift + C	查看最近操作项目的变化情况列表&lt;/li&gt;
&lt;li&gt;Alt + Shift + F	添加到收藏夹&lt;/li&gt;
&lt;li&gt;Alt + Shift + I	查看项目当前文件&lt;/li&gt;
&lt;li&gt;Alt + Shift + F7	在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入&lt;/li&gt;
&lt;li&gt;Alt + Shift + F9	弹出 Debug 的可选择菜单&lt;/li&gt;
&lt;li&gt;Alt + Shift + F10	弹出 Run 的可选择菜单&lt;/li&gt;
&lt;li&gt;Alt + Shift + 左键双击	选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句&lt;/li&gt;
&lt;li&gt;Alt + Shift + 前方向键	移动光标所在行向上移动&lt;/li&gt;
&lt;li&gt;Alt + Shift + 后方向键	移动光标所在行向下移动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ctrl--shift--alt&#34;&gt;Ctrl + Shift + Alt&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ctrl + Shift + Alt + V	无格式黏贴&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + Alt + N	前往指定的变量 / 方法&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + Alt + S	打开当前项目设置&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + Alt + C	复制参考信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;F2	跳转到下一个高亮错误 或 警告位置 （必备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F3	在查找模式下，定位到下一个匹配处&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F4	编辑源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F7	在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，&lt;/p&gt;
&lt;p&gt;则不会进入该内嵌的方法中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F8	在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F9	在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F11	添加书签&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F12	回到前一个工具窗口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tab	缩进&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ESC	从工具窗口进入代码文件窗口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连按两次Shift	弹出 Search Everywhere 弹出层&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
